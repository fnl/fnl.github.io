<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>fnl.es</title><link href="http://fnl.es/" rel="alternate"></link><link href="http://fnl.es/feeds/all.atom.xml" rel="self"></link><id>http://fnl.es/</id><updated>2013-10-08T00:00:00+02:00</updated><entry><title>Concurrent Node.js</title><link href="http://fnl.es/concurrent-nodejs.html" rel="alternate"></link><updated>2013-10-08T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2013-10-08:concurrent-nodejs.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, a &lt;a class="reference external" href="https://twitter.com/SoftActiva"&gt;colleague&lt;/a&gt; of mine asked me to introduce the most important concepts of &lt;a class="reference external" href="http://nodejs.org/"&gt;Node&lt;/a&gt; programming to a flock of interested people in our &lt;a class="reference external" href="http://www.cnio.es/es/grupos/plantillas/presentacion.asp?grupo=50004294"&gt;research group&lt;/a&gt;.
Initially, I declined, considering the &lt;a class="reference external" href="http://howtonode.org/"&gt;vast&lt;/a&gt; &lt;a class="reference external" href="http://docs.nodejitsu.com/"&gt;number&lt;/a&gt; of &lt;a class="reference external" href="http://www.nodebeginner.org/"&gt;tutorials&lt;/a&gt; and &lt;a class="reference external" href="https://duckduckgo.com/?q=node.js+book"&gt;books&lt;/a&gt;, but then thought it might be quite an interesting challenge:
Is there any aspect of Node development that is not easily understood by Node beginners and that is poorly covered by the existing posts?
Taking this into account, my main goals for this tutorial are:
Which part of developing Node programs is the hardest to grasp for programmers proficient in imperative languages (Java, JavaScript, Objective-C, PHP, Python, Ruby, etc.)?
In my opinion, the biggest issue is writing asynchronous, concurrent Node applications.
At the same time, this seems to be the least covered aspect of all existing introductory tutorials.
Last, I wanted to present relevant issues &lt;em&gt;without&lt;/em&gt; getting too far ahead of the status quo (e.g., &lt;a class="reference external" href="http://wiki.ecmascript.org/doku.php?id=harmony:generators"&gt;generators&lt;/a&gt;, which are still considerd experimental right now) or anything else that you would not want to use in production.&lt;/p&gt;
&lt;p&gt;Overall, this tutorial should teach you to &lt;em&gt;code&lt;/em&gt; &lt;a class="reference external" href="http://www.reactivemanifesto.org/"&gt;reactive&lt;/a&gt; programs that are both maintainable and concise.
Nonetheless, I will assume you have a basic idea about Node and JavaScript, so I do expect you have read at least one of those excellent &lt;a class="reference external" href="https://github.com/maxogden/art-of-node#the-art-of-node"&gt;introductions&lt;/a&gt;.
In particular, you should have a basic idea of how Node uses &lt;a class="reference external" href="http://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-callbacks"&gt;callbacks&lt;/a&gt; to handle &lt;a class="reference external" href="http://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-event-emitters"&gt;events&lt;/a&gt;, given that they are the core concept of Node apps.
And although I will cover this aspect in more detail, Nodejitsu also has a short section on writing &lt;a class="reference external" href="http://docs.nodejitsu.com/articles/getting-started/control-flow/how-to-write-asynchronous-code"&gt;asynchronous&lt;/a&gt; JavaScript and spawning &lt;a class="reference external" href="http://docs.nodejitsu.com/articles/child-processes/how-to-spawn-a-child-process"&gt;child processes&lt;/a&gt; in Node.&lt;/p&gt;
&lt;p&gt;To make this discussion more valuable for real-world projects, I restrict myself to use “battle-tested” packages;
After checking with &lt;a class="reference external" href="https://npmjs.org/"&gt;npm&lt;/a&gt; and GitHub, I decided to only use &lt;strong&gt;async&lt;/strong&gt; and &lt;strong&gt;Q&lt;/strong&gt;, plus some &lt;strong&gt;underscore&lt;/strong&gt; magic (only &lt;a class="reference external" href="http://underscorejs.org/#partial"&gt;partial&lt;/a&gt; function application).
The tutorial should explain to the reader how, using a limited set of tools, a Node developer can write highly asynchronous Node apps without ending up in &amp;quot;concurrency hell&amp;quot;.
This introduction will take the reader familiar with Node's basic callback mechanism (&lt;a class="reference external" href="http://www.webdesignerdepot.com/2012/09/jquery-the-good-the-bad-and-the-ugly/"&gt;evil tongues&lt;/a&gt; would say &amp;quot;callback spaghetti&amp;quot;) via asynchronous control structures to a concurrent, functional programming style that uses &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Futures_and_promises"&gt;promises&lt;/a&gt; - also know as &lt;strong&gt;futures&lt;/strong&gt; - to delegate the logical flow from the JavaScript code to the V8 engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quick-refresher"&gt;
&lt;h2&gt;A Quick Refresher&lt;/h2&gt;
&lt;p&gt;Lets look at a static HTTP file server, using the basic Node modules only:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var http = require(&amp;quot;http&amp;quot;)
var url = require(&amp;quot;url&amp;quot;)
var path = require(&amp;quot;path&amp;quot;)
var fs = require(&amp;quot;fs&amp;quot;)
var port = process.argv[2] || 80

http.createServer(function(request, response) {
  var uri = url.parse(request.url).pathname
  var filename = path.join(process.cwd(), uri)

  path.exists(filename, function(exists) {
    if(!exists) {
      response.writeHead(404, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;})
      response.write(&amp;quot;404 Not Found\n&amp;quot;)
      response.end()
    } else {
      if (fs.statSync(filename).isDirectory()) filename += '/index.html'

      fs.readFile(filename, &amp;quot;binary&amp;quot;, function(err, file) {
        if(err) {
          response.writeHead(500, {&amp;quot;Content-Type&amp;quot;: &amp;quot;text/plain&amp;quot;})
          response.write(err + &amp;quot;\n&amp;quot;)
          response.end()
        } else {
          response.writeHead(200)
          response.write(file, &amp;quot;binary&amp;quot;)
          response.end()
        }
      })
    }
  })
}).listen(parseInt(port, 80))

console.log(&amp;quot;file server running at http://localhost:&amp;quot; + port + &amp;quot;/&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This highlights basic Node concepts; Upon receiving a request, the server makes an asynchronous check via the OS to ensure the file exists.
The asynchronicity is indicated by the callback that gets sent to &lt;tt class="docutils literal"&gt;path.exists()&lt;/tt&gt;.
Then, again asynchronously (note the callback sent into &lt;tt class="docutils literal"&gt;fs.readFile()&lt;/tt&gt;), Node reads the file, and if this job completes successfully, sends the file (data) to the response handler.
Because both checks are done asynchronously, this leaves the server process free to handle other requests while the OS is doing the file lookups (i.e., &amp;quot;non-blocking&amp;quot;).
However, this demonstrates a problem with this callback coding style: the functions are stacked one on top of another, making this code quite uncomfortable to read and maintain.&lt;/p&gt;
&lt;p&gt;Before we begin, it is also worth to refresh the &lt;strong&gt;six commandments&lt;/strong&gt; (taken from Caolan McMahon's excellent post on Node &lt;a class="reference external" href="http://caolanmcmahon.com/posts/nodejs_style_and_structure/"&gt;style and structure&lt;/a&gt;) you should follow when coding any concurrent program:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Never mix sync and async style: return a value &lt;em&gt;or&lt;/em&gt; a callback, but not either.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Return&lt;/em&gt; on a callback: write &lt;tt class="docutils literal"&gt;return callback(null, result)&lt;/tt&gt; to prevent execution continuing beyond the CB.&lt;/li&gt;
&lt;li&gt;Always check errors in callbacks: make sure the CB has a way to deal with error states, as in &lt;tt class="docutils literal"&gt;if (err) { ... }&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Avoid mutable state - it leads to &amp;quot;debugging hell&amp;quot; in concurrent programs (e.g., &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heisenbug"&gt;Heisenbugs&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Only use try, throw &amp;amp; catch within imperative code sections (you cannot throw &amp;quot;across&amp;quot; a CB).&lt;/li&gt;
&lt;li&gt;Write tiny functions: maybe 3 statements, and no more than 5.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="multiprocessing-in-node-js"&gt;
&lt;h2&gt;Multiprocessing in Node.js&lt;/h2&gt;
&lt;p&gt;Node is process-oriented, i.e., unlike some languages where you create multiple threads in your process, in node you need to &amp;quot;open&amp;quot; multiple OS processes (using &lt;tt class="docutils literal"&gt;popen(3)&lt;/tt&gt;).
The default tool to run multiple processes in Node is the &lt;a class="reference external" href="http://nodejs.org/api/child_process.html"&gt;child_process&lt;/a&gt; module, and, as an experimental add-on since Node v9, &lt;a class="reference external" href="http://nodejs.org/api/cluster.html"&gt;cluster&lt;/a&gt; can run multiple Node processes in parallel that share the same port or socket.
When forking/spawning/executing child process, be aware that segmentation faults and other nasty errors in a child process have the potential to bring down your whole stack.
In general, there are three calls that are relevant for running parallel processes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options"&gt;spawn&lt;/a&gt; provides a &lt;strong&gt;streaming&lt;/strong&gt; process that you communicate with through Unix pipes. Think of it as in shell syntax &amp;quot;&lt;tt class="docutils literal"&gt;process &amp;lt; instream &amp;gt; outstream &amp;amp;&lt;/tt&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"&gt;exec&lt;/a&gt; runs a single shell &lt;strong&gt;command&lt;/strong&gt; and returns the exit status of the computation. Think of it as in shell syntax &amp;quot;&lt;tt class="docutils literal"&gt;exec input; echo $?&lt;/tt&gt;&amp;quot;. Note that while exec does have an output buffer, it is tiny and you should use the streaming interface of spawn if you expect to receive output from the process you are running.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options"&gt;fork&lt;/a&gt; runs a &lt;strong&gt;worker&lt;/strong&gt; script you can communicate with via a &lt;em&gt;channel&lt;/em&gt;. Think of it as a bidirectional version of the shell pipe &amp;quot;&lt;tt class="docutils literal"&gt;server | worker &amp;amp;&lt;/tt&gt;&amp;quot;. Fork is also useful to isolate blocking calls from your otherwise non-blocking Node program.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that &lt;tt class="docutils literal"&gt;spawn&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;fork&lt;/tt&gt; are much like background daemons, while &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; runs some binary to completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-case-a-service-broker"&gt;
&lt;h2&gt;Example Case: A Service Broker&lt;/h2&gt;
&lt;p&gt;Throughout this tutorial, we will use a theoretical service broker that might query a DB or use XHR to communicate with another server.
It also could be some worker writing or reading data, or anything else that is somehow &amp;quot;IO-bound&amp;quot;.
Whatever you prefer, the point is that this is a blocking (&amp;quot;side-effecting&amp;quot;) IO call in your program that you want to handle asynchronously.
In other words, this means you will need to use &lt;strong&gt;callbacks&lt;/strong&gt; (CB) to be notified when the IO event finished and with which result and error state.&lt;/p&gt;
&lt;p&gt;First, we create a directory where we can put our tutorial code, and for the sake of popularity, use the &lt;a class="reference external" href="http://expressjs.com/"&gt;Express&lt;/a&gt; web app framework:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir reactive-node-tutorial
$ cd reactive-node-tutorial
$ npm install express
$ node_modules/express/bin/express
yes
$ npm install
&lt;/pre&gt;
&lt;p&gt;We will use the following &lt;tt class="docutils literal"&gt;broker.js&lt;/tt&gt; script, placed in this same directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/* a &amp;quot;blocking&amp;quot; query */
function query(ms) {
  var start = new Date().getTime()
  console.log(&amp;quot;&amp;quot; + start + &amp;quot;: query started&amp;quot;)
  while ((new Date().getTime() - start) &amp;lt; ms) {}
  console.log(&amp;quot;&amp;quot; + new Date().getTime() + &amp;quot; query finished&amp;quot;)
}


process.on('message', function(m) {
  // normally, here would probably be:
  // process.send(query(m))

  query(Math.floor(Math.random()*200+900))
  process.send(m)
  process.exit()
})
&lt;/pre&gt;
&lt;p&gt;Obviously, this is quite a a toy example, because our worker receives and returns only one single message before shutting down.
Similarly, our server API for this broker in &lt;tt class="docutils literal"&gt;app.js&lt;/tt&gt; will be just as simple:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var broker = require('child_process')

function query(bucket, query, cb) {
  var channel = broker.fork(__dirname + '/db.js')
  channel.send(query)

  channel.on('message', function(result) {
    cb(null, result)
  })

  channel.on('error', function(err) {
    console.log(err)
    cb(err)
  })
}
&lt;/pre&gt;
&lt;p&gt;Go ahead and replace everything in &lt;tt class="docutils literal"&gt;app.js&lt;/tt&gt; with this code.
In a real-world program, you would use a pool of workers and, each time you start a &lt;tt class="docutils literal"&gt;query&lt;/tt&gt;, use another channel from your pool.
As a matter of fact, most Node libraries will provide you with non-blocking versions of the API they wrap, so you might need no workers at all.
Rather, you are more likely to start scaling Node across multiple cores and even machines using workers and IPC events.
However, this will be enough to run our queries in parallel and demonstrate idioms that can help you write your code to be highly concurrent and easy to scale.
For demonstration purposes this setting will do, so let's start coding our &amp;quot;reactive&amp;quot; app!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-simple-json-rest-service"&gt;
&lt;h2&gt;A Simple JSON-REST Service&lt;/h2&gt;
&lt;p&gt;Let's assume we want to provide a JSON-REST web service connecting a query for a blogger ID against the broker that in turn interfaces to some form of external API or DB.
Upon receiving the user's ID, the server should query the broker for the user's data, and then, in a second step can use that data to fetch any posts the user wrote and any comments she made.
In other words, we have a serial flow of fetching user and the an parallel step of fetching post and comment data.
Once all this data is collected, the server should respond with a JSON object containing this data.&lt;/p&gt;
&lt;p&gt;In the simplest case, you would string a few calls to your query API together and return the results, maybe like this (&lt;em&gt;anti-pattern&lt;/em&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var app = require('express')()

app.get('/sync/:userId', function(req, res, next) {
  var userId = req.params.userId

  db_query('users', userId, function(err, user) {
    if (err) return next(err)

    db_query('posts', {poster: user}, function(err, posts) {
      if (err) return next(err)

      db_query('comments', {commenter: user}, function(err, comments) {
        if (err) return next(err)
        else return res.json({user: user, posts: posts, comments: comments})
      })
    })
  })
})


app.listen(8000)
&lt;/pre&gt;
&lt;p&gt;(Again, you can append this to the app.js you created earlier, just as all following code snippets.)
The above example gives rise to the (wrong) argument why callbacks are a Bad Idea (you will learn the true reason why callbacks are evil later):
By placing one CB inside the former, or returning (think &amp;quot;break&amp;quot;) early if an error occurred, we end up in &lt;a class="reference external" href="http://callbackhell.com/"&gt;callback hell&lt;/a&gt;.
In other words, code that is no longer maintainable and hard to unit test, as we will see.
Worse, we just lost the advantage of using Node... this code is actually being run synchronously, one broker query after the next!
If you run this app in the shell and query the URL (e.g., &lt;tt class="docutils literal"&gt;curl &lt;span class="pre"&gt;http://localhost:8000/sync/example&lt;/span&gt;&lt;/tt&gt;), you will get something like this output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ node app.js
1381334176812: query started
1381334177793 query finished
1381334177858: query started
1381334178830 query finished
1381334178897: query started
1381334179868 query finished
&lt;/pre&gt;
&lt;p&gt;As can be seen, despite our best intentions, all queries are run one after the next instead of running the last two in parallel.
So we need to dispatch our last two &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; calls simultaneously once we have the &lt;tt class="docutils literal"&gt;user&lt;/tt&gt; data and use the callbacks to collect the results.
In addition, this will allow us to &amp;quot;unstring&amp;quot; this callback chain a bit.
This takes us straight into the realm of asynchronous programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="home-brew-asynchronicity"&gt;
&lt;h2&gt;Home-brew Asynchronicity&lt;/h2&gt;
&lt;p&gt;While this certainly is not the cleanest code, here is a quick shot at solving the problem of concurrently running these three queries:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
app.get('/brew/:userId', function(req, res, next) {
  var userId = req.params.userId
  var result = {}
  var cbCounter = 0
  var gotError = false

  function checkError(err, cb) {
    if (gotError) return
    if (err) {
      gotError = true
      return next(err)
    }
    cbCounte))r++
    return cb()
  }

  db_query('users', userId, function(err, user) {
    return checkError(err,  function() {
      result.user = user

      db_query('posts', {poster: user}, function(err, posts) {
        return checkError(err, function() {
          result.posts = posts
          if (cbCounter == 3) return res.json(result)
        })
      })

      db_query('comments', {commenter: user}, function(err, comments) {
        return checkError(err, function() {
          result.comments = comments
          if (cbCounter == 3) return res.json(result)
        })
      })
    })
  })
})
&lt;/pre&gt;
&lt;p&gt;While this version now runs the last two queries concurrently, and, if you have more than one CPU core at least, in parallel, the code has become quite bloated.
You need to ensure that all three calls have completed before returning a valid result.
You need to ensure to only return the error once.
And you need to make sure you have collected the intermediate results.
Last, if you add another query, you might forget to update the counter checks, use a wrong counter value, or forget to store the intermediate result.
Luckily, these issues have been solved with the second most popular node module used by fellow Node coders, &lt;a class="reference external" href="https://github.com/caolan/async"&gt;async&lt;/a&gt; (the most popular dependency being ... you guessed it, &lt;a class="reference external" href="http://underscorejs.org/"&gt;underscore&lt;/a&gt;, which we will use in a bit, too).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="controlling-data-flow"&gt;
&lt;h2&gt;Controlling Data Flow&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;$ npm install async&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;We wil use the &lt;a class="reference external" href="https://github.com/caolan/async#auto"&gt;auto&lt;/a&gt; method of &lt;a class="reference external" href="https://github.com/caolan/async"&gt;async&lt;/a&gt; to make the code more readable, leaving all the mentioned issues up to the library to take care of.
&lt;tt class="docutils literal"&gt;auto&lt;/tt&gt; takes a &amp;quot;tasks object&amp;quot; (an object where each property is a function considered a task) and returns an equally shaped object with the results if all tasks were run without errors.
In addition to the tasks, you can list any other tasks you handed to auto that have to be completed before that specific task is run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var async = require('async')

app.get('/async/:userId', function(req, res, next) {
  var userId = req.params.userId

  async.auto({
    user: function(cb) {
      db_query('users', userId, cb)
    },
    posts: ['user', function(cb, res) {
      db_query('posts', {poster: res.user}, cb)
    }],
    comments: ['user', function(cb, res) {
      db_query('posts', {commenter: res.user}, cb)
    }]
  }, function(err, result) {
    if (err) next(err)
    else res.json(result)
  })
})
&lt;/pre&gt;
&lt;p&gt;As shown, we send the auto function an object with three tasks, &lt;tt class="docutils literal"&gt;user&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;posts&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;comments&lt;/tt&gt;.
Both the &lt;tt class="docutils literal"&gt;posts&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;comments&lt;/tt&gt; tasks require that the &lt;tt class="docutils literal"&gt;user&lt;/tt&gt; task has been run successfully before them, as indicated by the array value they map to.
The tasks (functions) have to accept a standard Node callback (&lt;tt class="docutils literal"&gt;function(err, result)&lt;/tt&gt;) and should delegate that to some asynchronous task.
In the case of dependent functions, they can also accept the result of the prior task(s).
The overall outcome then is pushed into another callback that is the last argument of &lt;tt class="docutils literal"&gt;auto&lt;/tt&gt;;
This CB will receive the error status or, if no error occurred, the result of each individual tasks, in the same &amp;quot;shape&amp;quot; as the object sent to auto.&lt;/p&gt;
&lt;p&gt;We have now solved our issues and have achieved our goal of a clean coding of our asynchronous tasks.
However, if you later need to write more complex code, the control to structure defined by your callbacks still gets back to you.
Because you are sending the data as well as the callbacks along your function chain, you are mixing two things you should keep separate:
In a nutshell, you are coding the &lt;strong&gt;control flow&lt;/strong&gt; of your program, while instead you should be describing what is known as &lt;strong&gt;data dependencies&lt;/strong&gt; and let the Node engine figure out when to run which task (callback).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-promised-land"&gt;
&lt;h2&gt;The Promised Land&lt;/h2&gt;
&lt;p&gt;As a matter of fact, with &lt;a class="reference external" href="https://github.com/caolan/async"&gt;async&lt;/a&gt; you will be able to write concurrent Node.js apps perfectly fine.
This last section will introduce you to concepts that will help you get rid of the problems described at the end of the former section.&lt;/p&gt;
&lt;p&gt;To avoid the use of control flow statements, declarative languages instead have developed the concept of the &lt;strong&gt;future&lt;/strong&gt;, also known as a &lt;a class="reference external" href="http://promises-aplus.github.io/promises-spec/"&gt;promise&lt;/a&gt;.
So far, we were using callbacks, that is, functions that do not return a value. This means they are hard to use when &lt;em&gt;composing&lt;/em&gt; new functions from them and, as they do not return a value, are exclusively executed for their &lt;em&gt;side-effects&lt;/em&gt;.
This means that both &lt;em&gt;function composition&lt;/em&gt; and &lt;em&gt;unit testing&lt;/em&gt; of these callbacks is rather a pain.
And it means that you have to manually control the &amp;quot;flow&amp;quot; of your data through these callbacks.
For example, to read a file in Node, the idiomatic structure is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var _ = require('underscore');

function finish(res, data) {
  res.write(data)
  res.end()
}

function sendData(res, data) {
  res.writeHead(200)
  finish(res, data)
}

function reportError(res, err) {
  res.writeHead(500)
  console.log(err)
  finish(res, data)
}

function onResult(res, err, data) {
  if (err) reportError(res, err)
  else sendData(res, data)
}

function(req, res) {
  var callback = _.partial(onResult, res)

  fs.readFile(req.params.filename, callback)
}
&lt;/pre&gt;
&lt;p&gt;Instead, if the &lt;tt class="docutils literal"&gt;readFile&lt;/tt&gt; function were to return a value, this could be expressed in a much cleaner way, without having to nest (structure) the tasks into callback chains.
However, as we know, at the time of calling &lt;tt class="docutils literal"&gt;readFile&lt;/tt&gt;, no such value exists - as a matter of fact, we do not even know if we will be able to read the file at all.
So the only thing we can return is a &amp;quot;future&amp;quot; value, or a &amp;quot;promise&amp;quot; to return such a value (hence the name of these data structures).
For this reason, such a data type would have to provide three methods:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
promise.resolve(result)
promise.reject(reason)
result = promise.then(onFulfilled(result), onRejected(error))
&lt;/pre&gt;
&lt;p&gt;The called function that returned the promise will, in the future, decide to resolve or reject the promise.
And that new promise will &lt;tt class="docutils literal"&gt;then&lt;/tt&gt; have to describe what the program should do if the promise has been &lt;em&gt;fulfilled&lt;/em&gt; or &lt;em&gt;rejected&lt;/em&gt;.
The most important concept is that promises are &lt;strong&gt;propagating&lt;/strong&gt;:
The return value of &lt;tt class="docutils literal"&gt;then&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;result&lt;/tt&gt; in the above API description) is yet another promise (the &amp;quot;output promise&amp;quot;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If you return a value from any of the two handlers (fulfilled, rejected), the output promise will get fulfilled, too.&lt;/li&gt;
&lt;li&gt;If you throw an exception in any of the two handlers, the output promise will get rejected.&lt;/li&gt;
&lt;li&gt;If you return yet another promise from any of the two handlers, the &lt;tt class="docutils literal"&gt;result&lt;/tt&gt; will &lt;em&gt;become&lt;/em&gt; that promise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means you can comfortably chain promises, while you can rely on &lt;em&gt;return values&lt;/em&gt; (instead of side effects).
With this, we now can separate the concerns and instead describe the asynchronous reading of a file using the promise:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var _ = require('_')
var Promise = require('q')
// wrap fs.readFile as a &amp;quot;promise-returning function&amp;quot;:
var readFile = Promise.nfbind(fs.readFile)

function setHeader(header, res, data) {
  res.setHeader(header)
  return data
}

var set200 = _.partial(setHeader, 200)
var set500 = _.partial(setHeader, 500)

function(req, res) {
  var data = readFile(req.params.filename)
  var error = _.partial(set500, res)
  var send = _.partial(set200, res)

  data.then(send, error)
    .then(res.write, console.log)
    .fin(function() { res.end() })
}
&lt;/pre&gt;
&lt;p&gt;Promises therefore make it possible to resolve function values in a &lt;em&gt;time-independent&lt;/em&gt; manner:
We can call the &lt;tt class="docutils literal"&gt;then&lt;/tt&gt; method after or &lt;em&gt;before&lt;/em&gt; either &lt;tt class="docutils literal"&gt;resolve&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;reject&lt;/tt&gt; have been executed.
Furthermore, libraries that implement promises must guarantee that no matter how often we check the promise' state (call &lt;tt class="docutils literal"&gt;then&lt;/tt&gt;), that promise always will be resolved or rejected the same way.
We have also eliminated the linear dependencies of each function on the next, thus our functions become much more convenient to reuse.
Last, this version is actually safer than the callback implementation:
If setting the header fails for any reason, this gets logged, and the parameter-less &lt;tt class="docutils literal"&gt;fin&lt;/tt&gt; method is &lt;strong&gt;always&lt;/strong&gt; executed with &lt;tt class="docutils literal"&gt;res.end()&lt;/tt&gt;, ensuring all responses will be closed.&lt;/p&gt;
&lt;p&gt;This makes promises ideal to resolve I/O bound (blocking) tasks.
(Do not use promises for CPU intensive tasks!
Protip: If reading blogs about comparing promise libraries, make sure the tests are using the right kind of task.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="from-control-flow-to-data-dependencies"&gt;
&lt;h2&gt;From Control Flow to Data Dependencies&lt;/h2&gt;
&lt;p&gt;As we have seen so far, the elegance of using promises instead of callbacks is that blocking functions now can &lt;em&gt;return values&lt;/em&gt; (promises) instead of requiring you to &lt;em&gt;send functions&lt;/em&gt; (callbacks) to them.
In other words, promise-returning functions behave like any other function.
Furthermore, the return value of &lt;tt class="docutils literal"&gt;then&lt;/tt&gt; will always be another (&amp;quot;output&amp;quot;) promise, possibly even the return value from or exception thrown in either handler sent to it.
Because of this behavior, you can keep chaining promises over your success (&lt;tt class="docutils literal"&gt;onFulfilled(result)&lt;/tt&gt;) and error functions (&lt;tt class="docutils literal"&gt;onRejected(error)&lt;/tt&gt;), and the final outcome will always be &lt;em&gt;the same&lt;/em&gt; result value or error.
As you return promises from your functions instead of having to send them continuation functions, you have separated the control flow from your code.&lt;/p&gt;
&lt;p&gt;If you want to learn the nitty-gritty theory behind the benefits of moving from callback-based control flow to data dependencies encoded as promises, James Coglan has an &lt;a class="reference external" href="http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/"&gt;excellent blog post&lt;/a&gt; on that matter.
And if you need more hands-on experience than what we have discussed so far, &lt;a class="reference external" href="http://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/"&gt;StrongLoop&lt;/a&gt; provides a very comprehensive tutorial of using promises.
We instead will directly get our hands dirty and use this knowledge to describe our three queries problem in terms of promises.
To do so, we will require the popular &lt;a class="reference external" href="http://documentup.com/kriskowal/q/"&gt;Q&lt;/a&gt; and &lt;a class="reference external" href="http://underscorejs.org/"&gt;underscore&lt;/a&gt; libraries:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ npm install q
$ npm install underscore
&lt;/pre&gt;
&lt;p&gt;Without much fanfare, this is how our JSON-REST service looks like using promises and some functional trickery:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var Q = require('q')
var _ = require('underscore')
var q_query = Q.nfbind(db_query)

function fetchPostsAndComments(user) {
  return Q.all([
    user,
    q_query('posts', {poster: user}),
    q_query('comments', {commenter: user})
  ])
}

function respond(res, user, posts, comments) {
  res.json({user: user, posts: posts, comments: comments})
}

app.get('/promise/:userId', function(req, res, next) {
  var userId = req.params.userId
  var response = _.partial(respond, res)

  q_query('users', userId)
    .then(fetchPostsAndComments, next)
    .spread(response, next)
})
&lt;/pre&gt;
&lt;p&gt;So what has changed?
Admittedly, except for the main function itself being a bit shorter, this code is longer than the asynchronous version.
Nonetheless, after introducing you to the benefits of promises, you should be able to see the elegance of this final solution.
In particular, because of the separation of concerns, your code has become much easier to unit test.
And because each function is clear and expressive, the code is easy to understand.
Last, we have reached our goal of three statements per function, too.&lt;/p&gt;
&lt;p&gt;Well, I hope to have enlightened you in a way or another and maybe made you a better Node developer!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="javascript"></category><category term="node.js"></category></entry><entry><title>A new "home" for fnl.es</title><link href="http://fnl.es/a-new-home-for-fnles.html" rel="alternate"></link><updated>2013-07-01T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2013-07-01:a-new-home-for-fnles.html</id><summary type="html">&lt;p&gt;After months of looking for a loophole in my calendar to migrate my rather outdated and mostly untended Blogger site to something more modern, I have found the ideal timing: The birth and arrival of my son, Alexander LV (&lt;a class="reference external" href="https://twitter.com/AlexThe55th"&gt;&amp;#64;AlexThe55th&lt;/a&gt;)!
(Because here in Spain even daddies get two to three weeks off.)&lt;/p&gt;
&lt;img alt="Alexander taking a sun bath." src="http://fnl.es/images/13-07-01_initial-alexander.jpg" style="width: 75%;" /&gt;
&lt;p&gt;I will reduce the amount of personal entries and augment the articles about (mostly biological) data mininig issues, in particular related to text mining and software engineering.
Now and then I intend to throw in some issues about privacy, human rights, travelling and all those other things that interest me and make life worth living.&lt;/p&gt;
&lt;p&gt;As blogging framework I have decided to move on to &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, because it is &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;-based, generating extremely light-weight static pages from &lt;a class="reference external" href="http://sphinx-doc.org/rest.html"&gt;ReST&lt;/a&gt; files.
This allows me to easily maintain the blog from any terminal and its pythonic origins allow me to hack the framework if need be.&lt;/p&gt;
</summary><category term="blog"></category><category term="alex"></category></entry><entry><title>Installing a full stack Python data analysis environment on OSX</title><link href="http://fnl.es/installing-a-full-stack-python-data-analysis-environment-on-osx.html" rel="alternate"></link><updated>2013-02-11T00:00:00+01:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2013-02-11:installing-a-full-stack-python-data-analysis-environment-on-osx.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Installing the Scientific Python stack from &amp;quot;source&amp;quot; has become a lot simpler recently and this tutorial was updated accordingly in November 2013 to use with OSX Mavericks and, in particular, Python 3.&lt;/p&gt;
&lt;p&gt;Installing a full-stack scientific data analysis environment on Mac OSX for Python 3 and making sure the correct, underlying Fortran and C libraries are used is (was?) not trivial.
Thanks to Apple, parts of the required libraries are already on your box when you install XCode (code-named the &amp;quot;&lt;a class="reference external" href="https://developer.apple.com/library/ios/documentation/Accelerate/Reference/AccelerateFWRef/_index.html"&gt;Accelerate&lt;/a&gt; Framework&amp;quot;), and the remaining pieces can easily be installed due to the great &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; project.
In other words, for the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms"&gt;BLAS&lt;/a&gt; optimizations this setup will use Apple's pre-installed &lt;a class="reference external" href="https://developer.apple.com/library/ios/documentation/Accelerate/Reference/AccelerateFWRef/_index.html"&gt;Accelerate&lt;/a&gt; framework and you can choose to add the &lt;a class="reference external" href="http://www.cise.ufl.edu/research/sparse/SuiteSparse/"&gt;SuiteSparse&lt;/a&gt; and &lt;a class="reference external" href="http://www.fftw.org/"&gt;FFTW&lt;/a&gt; libraries via Homebrew for some extra speed when factorizing sparse matrices and doing Fourier transforms.
This guide will describe how to properly install the following software stack on Mac OSX from their sources and ensuring all the relevant C/Fortran &amp;quot;acceleration&amp;quot; is available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.scipy.org/scipylib"&gt;SciPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ipython.org/"&gt;IPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this stack, it is a breeze to add other cool data analysis tools such as &lt;a class="reference external" href="http://scikit-learn.org/stable"&gt;scikit-learn&lt;/a&gt;, &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt;, &lt;a class="reference external" href="http://sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, &lt;a class="reference external" href="http://radimrehurek.com/gensim"&gt;gensim&lt;/a&gt;, or &lt;a class="reference external" href="http://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; in your &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;VirtualEnv&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="preparatory-setup"&gt;
&lt;h2&gt;Preparatory Setup&lt;/h2&gt;
&lt;p&gt;First, you need to make sure you have &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; installed and running without any issues:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew doctor
&lt;/pre&gt;
&lt;p&gt;If that produces any other output than:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Your system is ready to brew.
&lt;/pre&gt;
&lt;p&gt;you need to stop &lt;em&gt;right now&lt;/em&gt; and fix the issues or install &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; first.
Note that if you &lt;em&gt;upgraded&lt;/em&gt; to OSX Mavericks, you also need to upgrade your XCode command line tools (or download them if you have not installed them) by executing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
xcode-select --install
&lt;/pre&gt;
&lt;p&gt;(And this means that you will have to re-install/compile most brew libraries, too, because of a change of XCode libraries...)
Once you have a clean version of Homebrew up and running, you can proceed to install the actual requirements.&lt;/p&gt;
&lt;p&gt;First, you need to install a Fortran compiler and &lt;a class="reference external" href="http://docs.python.org/3"&gt;Python3&lt;/a&gt; itself:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew tag homebrew/science
brew install gfortran
brew install python3
&lt;/pre&gt;
&lt;p&gt;All of these commands should work nicely and you should encounter no issues.&lt;/p&gt;
&lt;p&gt;Second, it is obviously necessary to set up a minimal Python environment.
This tutorial will be using &lt;strong&gt;distribute&lt;/strong&gt; and &lt;strong&gt;pip&lt;/strong&gt; to install Python packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl -O http://python-distribute.org/distribute_setup.py
python3 distribute_setup.py
curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
python3 get-pip.py
&lt;/pre&gt;
&lt;p&gt;Note that you &lt;em&gt;do not&lt;/em&gt; need to prefix &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; to any of this - because you installed Python 3 using &lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;, you are relieved from having to &amp;quot;root&amp;quot; everything.
And you should consider using &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;VirtualEnv&lt;/a&gt; and &lt;a class="reference external" href="http://nose.readthedocs.org/en/latest"&gt;nose&lt;/a&gt; for your Python development, too:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3 install virtualenv
pip3 install nose
&lt;/pre&gt;
&lt;p&gt;With this setup, you have Homebrew plus Python 3000 with &lt;strong&gt;pip&lt;/strong&gt;,  &lt;strong&gt;nosetests&lt;/strong&gt;, and &lt;strong&gt;virtualenv&lt;/strong&gt; all set up.
This is a great start for any kind of Python development;
Normally, it is suggested to &amp;quot;stop&amp;quot; here and install all further Python packages only in each &amp;quot;virtual environment&amp;quot;.
However, this scientific stack you are building is quite a lot of work to set up (compile-wise), so it is a time-saver to have this stack installed globally and then make use of it via &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--system-site-packages&lt;/span&gt;&lt;/tt&gt; when creating a new virtual environment instead of having to install it each time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="numpy"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, download the latest stable &lt;a class="reference external" href="http://sourceforge.net/projects/numpy/files/NumPy/"&gt;NumPy sources from SourceForge&lt;/a&gt;.
By installing from source, NumPy will automatically detect that you are using OSX and therefore configure itself to use the &lt;em&gt;Accelerate&lt;/em&gt; framework for the BLAS/LAPACK optimizations:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 setup.py config
&lt;/pre&gt;
&lt;p&gt;Below &lt;tt class="docutils literal"&gt;atlas_info&lt;/tt&gt;, at the end the config output, you should see the following message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FOUND:
  extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']
  extra_compile_args = ['-msse3']
  define_macros = [('NO_ATLAS_INFO', 3)]
&lt;/pre&gt;
&lt;p&gt;As NumPy recognized Accelerate, you can proceed with the installation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 setup.py build
python3 setup.py install
&lt;/pre&gt;
&lt;p&gt;If you installed &lt;a class="reference external" href="http://nose.readthedocs.org/en/latest"&gt;nose&lt;/a&gt; (as advised), you also can test that your installation is working correctly:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 -c &amp;quot;import numpy; numpy.test('full')&amp;quot;
&lt;/pre&gt;
&lt;p&gt;All tests should pass without errors or issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scipy"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.scipy.org/scipylib"&gt;SciPy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use SciPy, you need to install &lt;a class="reference external" href="http://cython.org/"&gt;Cython&lt;/a&gt; and &lt;a class="reference external" href="http://swig.org/"&gt;SWIG&lt;/a&gt; first:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3 install Cython
brew install swig
&lt;/pre&gt;
&lt;p&gt;Optionally, you can also install &lt;a class="reference external" href="http://www.openblas.net/"&gt;OpenBLAS&lt;/a&gt;, &lt;a class="reference external" href="http://www.fftw.org/"&gt;FFTW&lt;/a&gt; and &lt;a class="reference external" href="http://www.cise.ufl.edu/research/sparse/SuiteSparse/"&gt;SuiteSparse&lt;/a&gt; (for the AMD and UMFPACK libraries) for some extra speedups on Fourier Transform and sparse asymmetric matrix factorizations:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew install openblas
brew install fftw --with-fortran
brew install suite-sparse --with-openblas
&lt;/pre&gt;
&lt;p&gt;This step is probably recommended (although it is entirely optional).&lt;/p&gt;
&lt;p&gt;Next you now can fetch the &lt;a class="reference external" href="http://sourceforge.net/projects/scipy/files/scipy/"&gt;SciPy sources from SourceForge&lt;/a&gt; and build them:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 setup.py config
python3 setup.py build
python3 setup.py install
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;config&lt;/tt&gt; step is only there so you can make sure SciPy found the Accelerate framework and the UMFPACK/AMD SuiteSparse libraries.
The &lt;a class="reference external" href="http://www.fftw.org/"&gt;FFTW&lt;/a&gt; library you installed earlier with Homebrew is not listed in this output, but will be used during the build, too.&lt;/p&gt;
&lt;p&gt;As with NumPy, you can run some tests to ensure our installation is working properly after moving to another directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python3 -c &amp;quot;import scipy; scipy.test()&amp;quot;
&lt;/pre&gt;
&lt;p&gt;None of the tests should fail (except for KNOWNFAIL and SKIP tests, naturally).&lt;/p&gt;
&lt;p&gt;If you have come this far, congratulations! Everything from here on will be a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cakewalk"&gt;cake-walk&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="matplotlib"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next step is the installation of matplotlib:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3 install matplotlib
&lt;/pre&gt;
&lt;p&gt;As it is trivial to install and only takes a few minutes, you might consider adding it to your virtual environments only.
However, the next packge that will be installed, IPython, makes use of matplotlib and is quite a hassle to install in every virtual environment.&lt;/p&gt;
&lt;p&gt;To ensure the plotting library is working, try this in an interpreter:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from pylab import \*; plot([1,2,3]); show()
&lt;/pre&gt;
&lt;p&gt;You should see a plot with a straight diagonal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ipython"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://ipython.org/"&gt;IPython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now it is time to install a great MATLAB-like interpreter and environment.
The first, optional, step is to install PyQt4 so you can use IPython's &lt;tt class="docutils literal"&gt;qtconsole&lt;/tt&gt;.
This is not required, but it is nice to render plots inline in a Qt terminal window, making the IPython &amp;quot;experience&amp;quot; more like MATLAB:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
brew install sip
brew install qt --HEAD # currently, on Mavericks, the --HEAD option is required
&lt;/pre&gt;
&lt;p&gt;Finally, you need to &lt;a class="reference external" href="http://www.riverbankcomputing.com/software/pyqt/download"&gt;download&lt;/a&gt; and install PyQt4 via &lt;tt class="docutils literal"&gt;python3 setup.py install&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Apart from PyQt4, installing IPython itself is again straightforward:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip3 install ipython[zmq,qtconsole,notebook,test]
&lt;/pre&gt;
&lt;p&gt;To make sure the installation worked, execute the newly installed &lt;tt class="docutils literal"&gt;iptest3&lt;/tt&gt; script.
Again as before, there should be no failures.&lt;/p&gt;
&lt;p&gt;From now on, instead of &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;, you should be using &lt;tt class="docutils literal"&gt;ipython3&lt;/tt&gt; if you want to work in a Python interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-data-science-libraries"&gt;
&lt;h2&gt;Additional Data Science Libraries&lt;/h2&gt;
&lt;p&gt;Finally, here is a list of mature, interesting data science libraries that all will use the stack you just installed.
These could all go either into the global site-packages, or you can just add them to your projects in your virtual environments as needed.
In the latter case, do not forget to enable the globabl stack with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--system-site-packages&lt;/span&gt;&lt;/tt&gt; when creating a new &lt;a class="reference external" href="http://www.virtualenv.org/"&gt;VirtualEnv&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://scikit-learn.org/stable"&gt;scikit-learn&lt;/a&gt; machine learning library: &lt;tt class="docutils literal"&gt;pip3 install &lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; statistical data analysis: &lt;tt class="docutils literal"&gt;pip3 install pandas&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sympy.org/en/index.html"&gt;SymPy&lt;/a&gt; symbolic computer algebra system: &lt;tt class="docutils literal"&gt;pip3 install sympy&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; probabilistic programming environment (see this &lt;a class="reference external" href="http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers"&gt;PyMC tutorial&lt;/a&gt;):
&lt;tt class="docutils literal"&gt;pip3 install pymc&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other noteworthy analytical tools include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://radimrehurek.com/gensim"&gt;gensim&lt;/a&gt; semantic modelling: &lt;tt class="docutils literal"&gt;pip3 install gensim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pytables.org/"&gt;PyTables&lt;/a&gt; large data management: &lt;tt class="docutils literal"&gt;pip3 install tables&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rpy.sourceforge.net/"&gt;RPy2&lt;/a&gt; Python-R interface: &lt;tt class="docutils literal"&gt;pip3 install rpy2&lt;/tt&gt; (assuming you have R installed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://github.com/pydata/patsy"&gt;patsy&lt;/a&gt; and &lt;a class="reference external" href="http://statsmodels.sourceforge.net/"&gt;StatsModels&lt;/a&gt; statistical models:
&lt;tt class="docutils literal"&gt;pip3 install patsy &amp;amp;&amp;amp; pip3 install statsmodels&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;E voilà&lt;/em&gt; - you now have a fully functioning environment for running
all kinds and sorts of statistical data analyses and developing machine
learning algorithms!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="apple"></category><category term="data mining"></category></entry><entry><title>No "Smart"-Phone, Please</title><link href="http://fnl.es/no-smart-phone-please.html" rel="alternate"></link><updated>2011-08-06T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2011-08-06:no-smart-phone-please.html</id><summary type="html">&lt;p&gt;Out of my strong opinions about privacy, I avoid the total exposure of my private life to governmental organizations and trans-national cooperations that you (maybe unconciously) subdue yourself by owning a &amp;quot;smart&amp;quot; phone and storing your whole life's data in the Cloud.
And no, I am not being paranoid: There is hard evidence for the &lt;a class="reference external" href="http://www.zeit.de/digital/datenschutz/2011-03/data-protection-malte-spitz/seite-1"&gt;tracking&lt;/a&gt; (&lt;em&gt;and&lt;/em&gt; now [EDIT in 2013] the &lt;a class="reference external" href="http://www.guardian.co.uk/world/prism"&gt;sniffing&lt;/a&gt;) going on - &lt;a class="reference external" href="http://www.onread.com/book/Brave-New-World-191056/"&gt;Huxley&lt;/a&gt; and &lt;a class="reference external" href="http://www.george-orwell.org/1984"&gt;Orwell&lt;/a&gt; didn't even scratch the surface of what was to come…
So don't waste your time trying to &amp;quot;Whats-App&amp;quot; me or convince me to contribute &amp;quot;content&amp;quot; via my mobile to &amp;quot;people marketing&amp;quot; (social network) sites.
Yet another argument: my old-school phone cost me 20 Euros to buy, contract free, and costs be 9 Euros to run, per month - roughly, about one quarter the cost of &amp;quot;smart&amp;quot;-phones.
In other words, I am saving a small holiday every year, or about 500 Euros.
Don't tell me again you are saving money because you now have Whats-App...
On top of all that, it frightens me to see - in restaurants and bars, at dinner tables at home, or in any other place people normally would talk to each other - more and more people turn into &amp;quot;Matrix dummys&amp;quot; that rather stare at their gadget than actually interact with each other.&lt;/p&gt;
</summary><category term="privacy"></category></entry><entry><title>Rails: RSpec'ing controllers with declarative authorization AND AuthLogic</title><link href="http://fnl.es/rails-rspecing-controllers-with-declarative-authorization-and-authlogic.html" rel="alternate"></link><updated>2010-03-12T00:00:00+01:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2010-03-12:rails-rspecing-controllers-with-declarative-authorization-and-authlogic.html</id><summary type="html">&lt;p&gt;I just had a rough time figuring out how to bypass all the security
features of the Rails project I am developing to write decent controller
specs with RSpec. I am using AuthLogic as authentication module and
declarative authorization (DA) for exactly that. However, when I started
to write controller specs that would simulate (HTTP) GET requests, I ran
into a wall: I simply could not digg what the cleanest way would be to
bypass both AuthLogic and DA. Finally, after finding the right queries
in Google, I managed to get the necessary snippets. To avoid that the
same tedious task might befall you, here's what you need to add, e.g.,
to your spec_helpers directory - I called the file
&amp;quot;controller_helpers.rb&amp;quot;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
module SessionHelper
  def current_user(stubs = {})
    &amp;#64;current_user ||= mock_model(User, stubs)
  end

  def user_session(stubs = {}, user_stubs = {})
    &amp;#64;current_user_session ||= mock_model(
      UserSession, { :user =&amp;gt; current_user(user_stubs) }.merge(stubs)
    )
  end

  def login(session_stubs = {}, user_stubs = {})
    UserSession.stub!(:find).and_return(
      user_session(session_stubs, user_stubs)
    )
  end

  def logout()
    &amp;#64;user_session = nil
  end

  def disable_authorization()
    Authorization.ignore_access_control(true)
  end
end
&lt;/pre&gt;
&lt;p&gt;The trick is that, for AuthLogic, you can now &amp;quot;authenticate&amp;quot; the user
by the stubbed UserSession that returns a mocked User model. DA is less
complicated: the &lt;tt class="docutils literal"&gt;disable_authorization()&lt;/tt&gt; method is all that is
needed. Now, in your &amp;quot;spec_helper.rb&amp;quot;, you add this line to the top:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
require File.dirname(__FILE__) + '/spec_helpers/controller_helpers'
&lt;/pre&gt;
&lt;p&gt;And this line somewhere in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Spec::Runner.configure&lt;/span&gt;&lt;/tt&gt; loop:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
config.include(SessionHelper)
&lt;/pre&gt;
&lt;p&gt;Now, in your controller specs, it is more than trivial to disable
authorization and authentication at once - simply add the following
line, e.g., to your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;before(:each)&lt;/span&gt;&lt;/tt&gt; definitions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
disable_authorization &amp;amp;&amp;amp; login
&lt;/pre&gt;
&lt;p&gt;Voila - your GET requests pass; and you can even add stubs to your
User model, if needed, by adding them as key-value pairs to the
&lt;tt class="docutils literal"&gt;login()&lt;/tt&gt; call above! So now you can get back to make your specs
pass...&lt;/p&gt;
</summary><category term="rspec"></category><category term="rails"></category></entry><entry><title>MobileMe vs. SugarSync vs. DropBox</title><link href="http://fnl.es/mobileme-vs-sugarsync-vs-dropbox.html" rel="alternate"></link><updated>2009-05-26T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2009-05-26:mobileme-vs-sugarsync-vs-dropbox.html</id><summary type="html">&lt;p&gt;I now have tested MobileMe, SugarSync, and DropBox for quite a while to
decide which service to buy for syncing my “electronic life” between my
Macs (soon I’ll be managing two OSX Server blades, one Mini, and two
MBPs!). After this period, there is no doubt to me: I’m syncing my iCal
calendars and Address Book content via Google, my bookmarks with XMarks,
and everything else via DropBox.&lt;/p&gt;
&lt;p&gt;MobileMe’s iDisk is nothing more than a pain and a piece of junk, which
I honestly did not expect. After all the problems they had last year
launching Me.com, I thought they would have by now created a working
service. But the iDisk and syncing my PIM (Personal Information Manager
- I still use Yojimbo, as Evernote’s and Together’s handling of
encryption are pure patched add-ons) was just a [bad] joke: You even
need to buy extra software if you want to do file syncing, as iDisk’s
“offline” sync is so slow and error prone I could not believe Apple
dares to offer something like that. So you need to either use Lingon and
rsync to sync to your online mode iDisk which doesn’t win a medal for
simplicity, or buy something like ChronoSync - and that takes hours
(!!!) to ensure 10 GB of data in about 30-40k Files are synced, &lt;strong&gt;every
time&lt;/strong&gt;. All the more, ChronoSync may be the fastest and safest syncer in
the wild! What finally got me mad was the sync agent using 90% CPU all
of the time, at times virtually locking you out of your own machine,
while performing almost nothing. Finally, if you ever try to navigate
that online iDisk, get yourself a cup of tea, you will have plenty of
time to drink it up until that file is open…&lt;/p&gt;
&lt;p&gt;Compared to SugarSync, DropBox with its simplicity and real versioning
of files is significantly better performing than SugarSync, espcially if
we talk upload and real volume, and if you ever tried SugarSync, it is a
resource hugger (not as bad as iDisk, but it will stop your workflow).
So in the end the choice for me was based on “mutual exclusion”, there
is simply still no service that can hold the candle to DropBox - and
just got me Pro account. As I am writing this, I am syncing up dozens of
gigs of data to my 50 GB DropBox, and I hardly notice it happening!&lt;/p&gt;
&lt;p&gt;Oh, if you get yourself an account for DropBox, either the free 2 GB or
a full Pro account, I would appreciate if you register via &lt;a class="reference external" href="https://www.getdropbox.com/referrals/NTE0NTA0OTk"&gt;this link&lt;/a&gt;,
as it creates me some 500 MB extra space for referring you :o).&lt;/p&gt;
</summary><category term="apple"></category><category term="cloud storage"></category></entry><entry><title>My first visit to a volcano</title><link href="http://fnl.es/my-first-visit-to-a-volcano.html" rel="alternate"></link><updated>2009-05-01T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2009-05-01:my-first-visit-to-a-volcano.html</id><summary type="html">&lt;p&gt;Actually, I already considered myself very lucky this year for visiting
the jungle in the Amazons. I would have not thought I could repeat such
an experience that soon again, but was proven wrong shortly after. A few
weeks ago, my girlfriend spent some weeks in Spain and we used the last
long weekend we had together to go to Tenerife, Canary islands. There I
had the pleasure to visit yet another really strange and amazing place
in our world: a volcano! My girlfriend, who grew up in Mexico, thought
it was quite funny I had not seen a volcano before... Well, she has not
been on a glacier so far :-P. I can only recommend this place - if you
do not know where to go for a short trip for a few days, you just have
found it. We rented a very romantic small house on the north-eastern tip
of the island, far away from all the tourist places. The owner renting
it to us (Juan Ramón) is a very kind and friendly guy, and he even went
into the trouble to send me my keys and a whole load of money I forgot
in the house - without even taking a cent for the troubles, although I
kept insisting! (Anybody knowing me don't laugh! Okay, I know, typically
Flo...) The house itself is built into the cliffs, with a marvelous view
over the sea and the beach below, and a great terrace. Mayte, my
girlfriend, found it and I can only say this was a great choice. If you
feel like renting it, follow this &lt;a class="reference external" href="http://www.casas-turismo-rural.com/alojamiento.phtml?alojamiento=2740"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We spent five days there, which is just enough time to visit the island
in a hurry - time flew by like nothing. You have to ask permission to
access the volcano in the capital city, Santa Cruz, which will then be
granted to you for a following day at a certain hour. Naturally, we
managed to be there too late the next day, but arrived again the day
after and the friendly guys guarding the entrance let us up anyways. Oh,
and pleeease dress appropriately: you can't imagine the scores of stupid
(Russian) girls trying to walk a volcano in high heels and with almost
nothing on - freezing to death at 3.700 m ASL and not able to walk in the
rocky area... Well, at least this allowed us to be completely alone at the
top of the crater! Another great feat of the park is, as it's at 2000+ m
ASL, that even if it's cloudy down on the beach, it might be a gorgeous
day in the park!&lt;/p&gt;
&lt;p&gt;Finally, one last word of warning: do not take residence on the south
side of the island except if you like artificial touristic sprawls: the
whole area is one urban block of concrete and completely hideous. As far
as I can tell, the north-east tip is best, maybe the (north-)western
areas may have some nice hideaways from the touristic towns, too. As for
the climate: just expect 20-25 ˚C in winter, 20-30 ˚C in summer - great!
One final recommendation if you like driving on narrow, curvy mountain
roads: rent a powerful car - I haven't had so much fun riding a car in a
long time!&lt;/p&gt;
</summary><category term="mayte"></category><category term="spain"></category><category term="travel"></category></entry><entry><title>News, Swines &amp; Pigs</title><link href="http://fnl.es/news-swines-pigs.html" rel="alternate"></link><updated>2009-04-30T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2009-04-30:news-swines-pigs.html</id><summary type="html">&lt;p&gt;Usually, I prefer to steer free from the day-to-day mainstream news, yet
even I have to accept a low level of &amp;quot;noise&amp;quot; if I want to know at least
something about the most significant things going on. However, currently
I get the overwhelming feeling that the whole news world is grunting and
snorting like a pigsty. You guessed it, I am concerned about all this
&amp;quot;swine flu&amp;quot; reporting going on. As can be easily demonstrated, this
whole &amp;quot;pandemic alert&amp;quot; and panic-making has gone completely out of
proportion. It is yet another example of how ridiculous news agencies
exaggerate or even blur the facts, and this attitude might be much more
lethal than most biological illnesses if measured by its indirect
impact.&lt;/p&gt;
&lt;p&gt;First of, some flu virus classification: There are three types of
influenza virus: A, B, and C. B and C play only very minor roles as they
mutate slower, are less virulent, and affect far less species. Usually,
when talking about a flu virus, type A is implied. Type A influenza then
is further categorized by the HxNx nomenclature. The H refers to the
hemagglutinin (HA) lectin and the N to the neuroaminidase (NA)
glycoprotein. Both are found on the outside coat of the virus particle.
HA mediates the virus' binding to target cells, while NA is responsible
for the release of progeny virus from infected host cells. The numbers
denote the antibody response of the virus, ordered by historic discovery
- meaning, a virus with the same H/N number is identified by the same
&lt;em&gt;type&lt;/em&gt; of antibodies, which form part of your immune system/defense. HA
and NA are essential for the virulence (the relative ability to cause
disease) in terms of infectiveness and the epidemic capabilities of the
strain. H1N1 denotes the class of flu virus HA/NA proteins that is the
most commonly found form in human influenza. Our immune system defends
us by recognizing mainly those two proteins (the &amp;quot;antigenes&amp;quot;) through
our antibodies. This means, from a pure immuno-defense point of view,
this kind of strain is the most well known to the human body and immune
system. This is one of the reasons why the new Hong Kong avian flu, with
its H5N1 composition, is much more virulent than the current H1N1 swine
flu or any other &amp;quot;regular&amp;quot; flu.&lt;/p&gt;
&lt;p&gt;Endemic states and lethal properties: H1N1 most deadly appearance and
the worst pandemic in modern human history was what we now know as the
&amp;quot;Spanish Flu&amp;quot; in 1918; This specific influenza virus transformed its
endemic properties (the ability to propagate within one kind of species,
in this case birds) to a panzootic state (affecting animals including
humans - epizootic would be the intermediate state that does not affect
humans). Note that this pandemic occurred during WW I, largely
facilitating its spread. In general, any kind of virus capable of
overcoming the species barrier is potentially more dangerous, as it is
likely to carry genetic material and protein structures the newly
infected species has never seen before, therefor being much more
virulent and lethal than the existing endemic strains. However, the
Spanish Flu killed somewhere around 20 million people (taking
conservative, low estimates), and its symptoms were so strong it was
often misdiagnosed as some much more severe infection. Apart from the
HA/NA properties already mentioned, there is the actual RNA (viruses
commonly use RNA instead of DNA to carry their genetic information) that
a virus uses to encode its proteins and other functions that are
important to the survival and impact of a virus. Our immune defense
looks for RNA sequences those are different to any sequence found in our
body and &amp;quot;destroys&amp;quot; those foreign sequences by cleaving the strands into
non-functional pieces with the help of so-called RNases. For this to
work, the immune system therefor has to identify the RNA [as foreign].
But a strand of RNA coming from another species might actually contain
nucleotide base sequences our immune system does not recognize (because
it only recognizes already &lt;em&gt;known&lt;/em&gt; foreign sequences), making the virus
much more lethal. This process of changing the RNA and protein
configuration is amplified by two related mechanisms called &amp;quot;genetic
drift&amp;quot; and &amp;quot;antigenic shift&amp;quot;. In the case of the Spanish flu, the RNA
was very &amp;quot;new&amp;quot; to the human's immune system and had a very high mutation
rate: how often the RNA sequence changes, roughly the meaning of the
aforementioned genetic drift and antigenic shift. On the contrary, the
new &amp;quot;Mexican&amp;quot; swine flu virus has a very similar RNA composition to
regular virus strains found in humans, i.e. it does not appear to be
significantly more leathal than any other flu. The only known difference
to the regular flu circulating in humans is that it seems to affect more
younger than older people, possibly due to the fact that older people's
immune systems already have &amp;quot;seen&amp;quot; a similar version of this virus some
time ago and therefor have antibodies that recognize the HA/NA
glycoproteins.&lt;/p&gt;
&lt;p&gt;Now compare this swine flu against any regular flu by numbers: The
regular flu kills about 250,000 to &lt;em&gt;half a million&lt;/em&gt; people &lt;em&gt;per year&lt;/em&gt;.
This overhyped swine flu managed to kill &lt;em&gt;eight&lt;/em&gt; (8!) humans so far and
it has been confirmed to have infected about 150 people worldwide (WHO
data, 29th of April, 2009). I.e., on a daily average about a
&lt;strong&gt;thousand times more&lt;/strong&gt; people die from the regular flu than this new
strain. Regular flu is almost continuously spreading somewhere in the
world, i.e., if the WHO took this into account, we would be living in a
nearly constant influenza pandemic. The swine flu just now made it to
the last stage before &lt;em&gt;even being defined&lt;/em&gt; as a WHO &amp;quot;pandemic&amp;quot;: There
must be a few known infections in at least two countries. Recall this
definition and check the real numbers when somebody is talking about a
new &amp;quot;pandemic&amp;quot;. The infection with swine flu seems to be no more lethal
than with any other flu, so your chances of dying from the swine flu
outside of Mexico are so marginal it makes no sense to take them into
account, while if you do go to Mexico, all you seriously need to do is
make sure your current health state is good enough to survive any flu
anywhere, which is much more prevalent and 1,000 times more likely to
kill you by a global statistic&lt;em&gt;.&lt;/em&gt; But the main point is: there is
nothing dangerous or wrong about going to Mexico, at least concerning
the flu. I would be much more worried about drug gangsters and hijackers
there if I were you: They managed to kill several thousands of people
this year alone already. In other words, the WHO rulings and
suggestions, that are close to ridiculous given the circumstances,
combined with the media hype are about to isolate Mexico from the world,
which leads me to my final and most important point.&lt;/p&gt;
&lt;p&gt;In general, this &amp;quot;pig-hyped&amp;quot; flu without any review of its background,
no factual content, and exclusively based on beliefs and propaganda has
only one really worrisome influence: it is weakening and isolating
Mexico, both socially and economically. Our ignorance to real facts are
estimated to cost Mexico &lt;em&gt;City&lt;/em&gt; (&amp;quot;D.F.&amp;quot;) alone around $88 million &lt;em&gt;per
day&lt;/em&gt;, and this figure will need huge updates for the crash Mexico's main
(legal) economic sector, tourism, will suffer, plus the costs incurred
on the country as a whole. This number will be similar to or more likely
even exceed the daily cost of the U.S. oil war in Irak (estimated to
about $250 million, in case you didn't know) - the only good news being
that instead of about 100 (direct, not counting the indirect toll, which
is estimated to be around five times higher) deaths per day, the swine
flu's daily death toll is still below one. In other words, the combined
direct and indirect negative impact of this insubstantial media hype on
a close to imaginary &amp;quot;Mexican Flu&amp;quot; will cost and destroy much more lives
than the virus itself most likely ever will have been capable of. Media
propaganda crusades against a country nowadays have the same
socioeconomic impact as the largest &amp;quot;real&amp;quot; war in decades if measured by
the daily cost. Keep this in mind the next time you read news about
swines from pigs.&lt;/p&gt;
</summary><category term="politics"></category></entry><entry><title>Why I love Python 3.0: Unicode + UTF-8</title><link href="http://fnl.es/why-i-love-python-30-unicode-utf-8.html" rel="alternate"></link><updated>2009-04-27T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2009-04-27:why-i-love-python-30-unicode-utf-8.html</id><summary type="html">&lt;p&gt;This change in Python 3.0 might be more than useful for
anybody intending to write programs that use more than the ASCII
characters (A-z, 0-9, and some symbols), which, given how i18n'ed most
applications are today, is rather the norm than the exception. I also
hope to encourage my fellow Pythoneers to update to 3.0 as soon as
humanly possible, not only because of this change, but because of the
general advantages of Python 3.0 (aka &amp;quot;no-where near 3000&amp;quot;...).&lt;/p&gt;
&lt;p&gt;In case you do not understand the difference between Unicode and String
arrays, here is a short paragraph to get you started. A String (str in
pre-3.0 Python, bytes/bytearray in Python 3.x+) is a byte-array already
&lt;em&gt;bound&lt;/em&gt; to a specific character-lookup table (e.g. ASCII, Latin-1,
UTF-8, etc.) to find the correct representation for that String. Note
that this is not the &lt;em&gt;glyph&lt;/em&gt; itself you see on-screen, as this depends
on, e.g., what font you are using, and is handled by the GUI toolkit or
the terminal. A Unicode array (unicode in pre-3.0, str in 3.x+) on the
other hand is an array of &amp;quot;universal&amp;quot; bytes, so-called &lt;strong&gt;code-points&lt;/strong&gt;
usually managed as two-byte arrays, but has no native representation.
Therefore, to create something readable from an Unicode object, you have
to &lt;em&gt;encode&lt;/em&gt; its bytes by using a codetable, such as ASCII or UTF-16, to
the correct String representation (&amp;quot;&lt;em&gt;bind&lt;/em&gt; the Unicode array to a code
table&amp;quot;). On the contrary, to create a Unicode array from a String array,
you need to &lt;em&gt;decode&lt;/em&gt; (&amp;quot;unbind&amp;quot;) the String's coding to get the
&amp;quot;universal&amp;quot; (in quotation marks as not all programming langues have to
use base 16 integers (aka hex, or two bytes)) Unicode. If you are not
used to thinking in these terms, a general tip for pre-3.0 Python: your
program should, when handling String input (SAX parsers for example
already do the conversion for you), convert it to Unicode (decode the
Strings), and when outputing your Unicode arrays, convert them back to
the desired String representation (encode them) - while working with
Unicode internally to avoid bugs and possible exploits. A (rather
stupid, but you can interpolate the danger, I hope) snippet from
Python's Unicode HOWTO might exemplify this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def read_file(filename, encoding):
    if '/' in filename:
        raise ValueError(u&amp;quot;'/' not allowed in filename&amp;quot;)
    else:
        return open(filename.decode(encoding), 'r')
&lt;/pre&gt;
&lt;p&gt;Looks good at first, but what about sending that function a String not
in any standard encoding? For example, the UTF-7 encoding for
u&amp;quot;/etc/passwd&amp;quot; is &amp;quot;+AC8-etc+AC8-passwd&amp;quot; - a nasty mistake if that file
is presented to a user... (the work-around in this trivial example is
obvious: just decode before the if-clause - or, even better, when the
string enters your program - and compare to u'/'). To summarize, in
Python (not so in C, for example!) a Unicode array consists of two-byte
elements (base 16 integers) called code-points, Strings are arrays of
bytes which are bound to a codetable that helps the Python interpreter
look up the bytes' character representations and send them to your
terminal or GUI. Unicode to String conversion is called encoding
(&amp;quot;binding&amp;quot;), String to Unicode conversion is decoding (&amp;quot;unbinding&amp;quot;). The
fact that, when using the Python shell, you see &amp;quot;real&amp;quot; characters for a
String or Unicode object is pure convenience and should not distract you
from how they truly work internally.&lt;/p&gt;
&lt;p&gt;After this lengthy Unicode vs. String intro, the best news first: if you
can allow yourself the luxury to program with any Python version and are
not dependent on external libraries, Python 3.0 is just made for you:
The new native String object is always a Unicode representation, and the
default encoding chosen for representing your strings is UTF-8. In other
words, if you use Python 3.0 and are happy with UTF-8, you no longer
have to worry about decoding your (byte) strings to Unicode arrays or
binding your Unicode code-points to the right (byte-) string
representations. While this might seem like something that should have
been done long ago, for historic reasons older programming languages
(plus Python pre-3.0) use ASCII as the default encoding, meaning you had
to look after de-/encoding the whole time when working with input/output
functionality of your programs and using most other languages other than
English - and even there you might want to have special characters
(don't be so naïve...). Sad side to this: what I am talking about here
is standard in Java...&lt;/p&gt;
&lt;p&gt;However, you no longer need to worry with 3.0: First, the totally
useless old String object (str) has been removed (to be exact, it could
be said it is now &amp;quot;integrated&amp;quot; into the bytes and bytearray objects),
including the even more ridiculous &amp;quot;encode&amp;quot; method for old str objects:
bytes and bytearray only support a &amp;quot;decode&amp;quot; message (to the new Unicode
str objects), while the intended use of str.encode, transforming Byte
objects that were represented as str objects in pre-3.0, like zip or
base64, now has to be done through a new method called &amp;quot;translate&amp;quot; on
the new bytes and bytearray objects in 3.0, or via encode on the new str
object. This was a dangerous duck typing strategy to have str.encode in
pre-3.0: as Unicode objects can and should have this method, too, but as
you could not tell if you were calling encode on a Unicode object or a
String object (without something like writing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
assert isinstance(my_obj, unicode)
&lt;/pre&gt;
&lt;p&gt;before every call to encode, at least), you could have been decoding
Unicode and encoding Strings - and because Python was (yes, was (!) -
see below) as &amp;quot;nice&amp;quot; as to do auto-coercion for you, without very
thorough testing libraries such a bug could go unnoticed for a long time
in pre-3.0. So, my praise to whomever was responsible for that decision!&lt;/p&gt;
&lt;p&gt;On the other hand, the unicode object is now the new str object, sans
the even more useless and dangerous &amp;quot;decode&amp;quot; functionality: the new
(Unicode) str object only supports str.encode (for cases where you want
something else than UTF-8), while str.decode is finally dropped from the
Python Standarad Library. Obviously, you might have a system that does
not want UTF-8, and encoding your Unicode str to whatever schema you
need with str.encode the whole time would be a pain; To define a
different encoding globally, Python uses your &amp;quot;coding&amp;quot; declaration in
the first lines of your program as the default encoding schema for all
your new, shiny Unicode str objects. I.e., writing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# -*- coding: funny-arab-dialect -*-
&lt;/pre&gt;
&lt;p&gt;will be enough if you have some strange language sporting glyphs that
require characters not found in the Unicode consortium's codetables, or
you might want to set it back to ASCII (the default in pre-3.0) if you
really need to ensure nothing other than good, old &amp;quot;7-bit&amp;quot; is output by
your program. On a side note: UTF-8 is compatible with ASCII, while
UTF-16 is not; i.e., an ASCII string encoded using the UTF-8 codetable
still gives the right characters, trying this with UTF-16 encoding does
not - and a good explanation why we have still not moved to UTF-16 in
general.&lt;/p&gt;
&lt;p&gt;Finally, the really dangerous auto-coercion of Python between Strings,
Unicode representations, and Byte arrays is gone for good. Your
message's argument types must now match the receiving object's type and
comparisons between the different types always evaluate to false. This
last change might sound drastic if seen from a purely rapid prototyping
view, but everybody with some intent on not going crazy while
programming will greatly appreciate this change. The bugs and exploits
stemming from wrong (en/de-) coding, or, let's say, too much duck typing
the str and unicode objects in pre-3.0 Python (yeah, I love to put the
fault on somebody else...) are finally gone! Also, as all Strings are
now represented as Unicode str objects, you no longer need to worry if,
while comparing two str objects, they are using the same encoding -
which was another fountain of bugs in pre-3.0 Python - as any String is
internally managed as universal Unicode.&lt;/p&gt;
&lt;p&gt;What is left to say? These changes are dramatic (even if they should
have been made already long ago with 2.0), and it will take a while
until Python 3.0 will have replaced 2.7 (the final, upcoming stable 2.x
release, which will warn you about code that will break with 3.0). But
the message should be clear: the effort of converting your libraries to
the next generation of Python is more than worth it, and the 2to3
converter should help if you had your encoding/decoding correct. If not,
converting to 3.0 might help you uncover some nasty bugs you were not
even aware of! Other reasons to &amp;quot;convert&amp;quot; would be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no more longs, which are now ints and unlimited in size (think of
what happend when reaching maxint before...),&lt;/li&gt;
&lt;li&gt;generator/views from most operations formerly returning lists (think:
time used for creating and garbage collecting those temporary lists),&lt;/li&gt;
&lt;li&gt;function annotations for metaclassing and advanced decorators,&lt;/li&gt;
&lt;li&gt;nonlocal scope (similar to LISPs lexical scope),&lt;/li&gt;
&lt;li&gt;dictionary comprehensions (&amp;quot;{k: v for k, v in my_dict}&amp;quot;) and set
literals (&amp;quot;my_set = {1, 2}&amp;quot;),&lt;/li&gt;
&lt;li&gt;and tons of streamlining the syntax and Standard Library.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tl-dr-summary"&gt;
&lt;h2&gt;tl;dr summary&lt;/h2&gt;
&lt;table&gt; &lt;tbody&gt;
&lt;tr&gt; &lt;th align="left"&gt; &lt;strong&gt;Python pre-3.0&lt;/strong&gt; &lt;/th&gt;
     &lt;th align="left"&gt; &lt;strong&gt;Python post-3.0&lt;/strong&gt; &lt;/th&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; str.encode &lt;/td&gt; &lt;td&gt; bytes.translate or (new) str.encode &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; str.decode &lt;/td&gt; &lt;td&gt; bytes.decode &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; unicode &lt;/td&gt; &lt;td&gt; str &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; unicode.encode &lt;/td&gt; &lt;td&gt; str.encode &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; unicode.decode &lt;/td&gt; &lt;td&gt; *n/a* &lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt; str("x") == unicode("x") &amp;nbsp;&amp;nbsp; &lt;/td&gt; &lt;td&gt; bytes("x") != str("x") &lt;/td&gt; &lt;/tr&gt;
&lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;
</summary><category term="unicode"></category><category term="python"></category></entry><entry><title>Zeitgeist Addendum: The Venus Project</title><link href="http://fnl.es/zeitgeist-addendum-the-venus-project.html" rel="alternate"></link><updated>2008-10-05T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2008-10-05:zeitgeist-addendum-the-venus-project.html</id><summary type="html">&lt;p&gt;I just sent a mail to some of my friends of whom I hope they might be
interested in this subject. I am sure this will be a very hot topic in
certain circles very soon; So I was giving this some thought if I should
publish this entry on my blog or not. My final conclusion is that I give
a damn if anybody can, will, must, etc. associate me with the content of
this documentary I am describing and linking to here. I just think it is
to important for humanity - and much more than 10to100 if you allow me
this joke and understand it because you followed the news lately - than
that it should be a question of my personal integrity needing
protection, as the content is &lt;strong&gt;highly controversial&lt;/strong&gt; and more
anarchistic in its nature than anything I have encountered in my life so
far.&lt;/p&gt;
&lt;p&gt;However, before reading on, I want to remind you that you are a free
person and as such are free to stop reading this blog or watching the
documentary to which I will be linking you at any time - I think it is
awesome, but I can well imagine you may not. Also, I saw the first
Zeitgeist movie and thought it was rather extreme and not offering any
solutions, just another of these “everything is bad” documentaries we
have out there already, but no real content. Well, this second release
just starts out the same again, and in the first twenty minutes (sorry,
it will take two hours of your time, but if you like what I write here,
I promise you, it’s worth every second) I was very tempted to turn it
down had there not been the financial disaster in the US and my feeling
that this documentary might give me some answers. I promise you,
watching this movie will do way more than letting you understand what
just has happened the last two weeks. Enough bla-bla, let’s see what you
might be into and if you want to see it.&lt;/p&gt;
&lt;p&gt;First, Zeitgeist: Addendum (which I think should be called
Revelation…) will explain the current situation of the world and how
things tie up to the situation we are in. If you do not understand this
part, you might want to look at the first Zeitgeist, but it is actually
irrelevant to the cause. The second part speaks straight from my heart,
and what I, too, believe is true: we - as in humanity - now have the
technology to create a self-sustainable, free, and, most importantly,
equal society. It will also explain you why there is no long-term need
for the military, the police, the government, laws, economy, and many
other things we were trained/taught to believe are unrelenting
(de:unbeugsam, es:irreductible), essential, and necessary elements of
human society. This leads into the third part, showing you something I
have never seen before: a possible future, and - this is why I stated
that I have never seen this before - as a more beautiful vision than I
had imagined even in my wildest dreams. This is probably the most
crucial part of the whole movie: you can accept it or not, and I -
obviously - cannot promise you (for now) that it all will become reality
one day. But allow me to dream… Finally, and this is what makes this
movie so exceptional, it explains you something I was missing in all
these documentaries I have watched so far, even better than just a
possible future: it gives you five very simple tasks to accomplish which
will be more than sufficient to make this future our reality if we reach
a, what they call, “critical mass” - although I still believe it is not
a question of if we do it, just when (as in before we eradicate
ourselves from this universe). OK, enough from me, I think the movie
will either disgust you or whatever, or you will have the feeling I am
just now having: my eyes were never that wide open (and no, yours truly
is not on any drugs as in a similarly named movie ;-)).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.zeitgeistmovie.com/"&gt;Zeitgeist Movie Site&lt;/a&gt; (download and/or contribute)&lt;/p&gt;
&lt;p&gt;The second and maybe much more important link is the one to the Venus
Project itself, which is the core element of this movie. You will much
better understand its implications after watching the movie, but feel
free to give it a look right away. Essentially, TVP is implementing a
post-scarcity economy where transparent, public technology and resource
exchanges have replaced the monetary system and the current market
economy while preserving productivity through cultural and social status
incentives.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.thevenusproject.com/"&gt;The Venus Project&lt;/a&gt;&lt;/p&gt;
</summary><category term="zeitgeist"></category></entry><entry><title>What were you up to this summer?</title><link href="http://fnl.es/what-were-you-up-to-this-summer.html" rel="alternate"></link><updated>2008-09-12T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2008-09-12:what-were-you-up-to-this-summer.html</id><summary type="html">&lt;p&gt;Obviously, from the huge gap between this and my last post you probably
already have imagined, mine was quite busy. To sum it up: I went to
Canada, then Mayte - that is my gorgeous girlfriend in case you still
don’t know! - was in Madrid for a whole month (happy me!!!) ad we went
to Tarragona, a city to the south of Barcelona, and to Bilbao. Finally,
I had to prepare for a talk in Turku, Finland, which was the last
“station” for me this summer.&lt;/p&gt;
&lt;p&gt;First things first, I’ll start with the Canada trip. This was more or
less all payed by my institute because I went to the world’s largest
bioinformatics conference, the ISMB in Toronto, to present my
&lt;a class="reference external" href="http://bcms.bioinfo.cnio.es"&gt;BioCreative MetaServer&lt;/a&gt; project the first time. Reception was quite
good, and my boss and I were both quite happy. The hotel we stayed at,
although expensive, was rather crappy: The second day we got back, a
colleague of mine found another guy in his room, just taking a shower!
After some inquiries at the desk, they could not “determine” how the
mistake happend and the manager went up with my friend to clear the
matters up. The guy there the even refused to change the room! So my
friend finally decided to do the only logic thing and moved to another
room… Nice hotel, especially considering we were paying almost Can$ 200
a night! The city of Toronto itself is very US-like, with skyscrapers
and a downtown that gets all crappy and full of homeless people during
the night. I also was kind of annoyed by the way people act there -
everyone is just a bit too friendly for my taste, it seems more like a
show than for real. Finally, the city surely is cosy in winter: all the
center is connected with tunnels so you do never have to go outside -
brr, that makes me freeze just thinking of it! Another funny thing:
while we were there, the largest bike theft ever was going on; later the
police caught a bike seller stealing most of them - they found a whole
2,800 (!!!) bikes in his home, his shop, and in various garages he had
to rent to store all those bikes!&lt;/p&gt;
&lt;p&gt;Mayte’s stay here without doubt was my personal highlight this summer,
and maybe even this year: she found a way to be here a whole month,
which we spent together almost every day (well, at least the nights…).
It will be a while before we can spend that much time together in a row
again! Anyways, apart from some good going out to “terrazas”, bars and
fancy night clubs here in Madrid, getting some even better dancing done
and listening to the latest electronic beats, we also did two trips to
the north of Spain and had a nice afternoon one weekend getting out of
the city sprawl and enjoying the great countryside - of which you can
ascertain yourself in the photos below. We went to Tarragona together
with Iris and Gonzalo to a Spa-Hotel with all sorts nice luxury like
Saunas, swimming pools, baths, massages, golf course, etc. and had a
very nice and relaxed weekend while celebrating Iris’ birthday. Actually
this is a really special occasion, as Iris usually loves to be with many
people and gives great parties with very many people (and nice Spanish
and Mexican girls … not that it would be any of my business nowadays!).
The second trip we made to Bilbao, enjoying the great landscape there,
making the obligatory - and worth while! - visit to the Guggenheim, as
well as having a heavy night out during the opening of the Semana
Grande, which had spectacular fireworks. While we were sitting in the
grass watching the fireworks, a group standing next to us with two guys
and a girl was watching just as delighted - when suddenly a really huge
explosion filled the whole sky above us in a startling view of little
stars falling down from the sky. The girl got rather frightened, jumped,
and ran a bit, when she finally just ducked “for cover” on the grass. I
admit it was not nice of us, but we had to laugh. Then her boyfriend
turned his head toward her and with a very nonchalant voice asked: “Que
tienes?” (“What’s up with you?” - “Was hast’n?”). The somewhat
frightened girlfriend returned to his side, while we keept giggling
every other time a huge rocket exploded and she started to make leeway…
Well, apart from that we had a great breakfast, too, with champagne and
caviar, of which I am sorry to say, I cannot give details. So, this city
is really worth a visit, especially if you have a person along who knows
her way around town, the bars, and the beaches. One day the time was
ripe for Mayte to go back, and I finally gave up my plans of taking here
hostage and let her go back - and now she is happy and far away from all
the bourgeois western world in South America… Man, do I miss her
company!&lt;/p&gt;
&lt;p&gt;The third and final trip this summer was going to Turku. What, you
really do not know what or where Turku is? No worries, I didn’t either.
To be honest, it took me some time to find an acceptable travel route to
that place… But every Turku inhabitant will quickly assure you that you
missed out on history: it was, until about a hundred years ago, the
capital of Finland, and is also the oldest town to be found in that part
of the world. So, you might be asking yourself quite rightfully,
what-the-hell was I doing in such a remote location? Well, I was
attending a text-mining conference there: the SMBM’08 (Semantic Mining
in Biomedicine) and was giving an almost one hour long presentation
about my platform. So you can imagine it took my quite some time to
prepare the talk and the data to present, and, as I never had given a
talk of that length, quite some cups of tea (thanks to a tip from
Mayte!) before the talk to keep me calm. As a result, I had the feeling
the presentation was quite some success and the response from the
audience more than good. Anyhow, the “real” success will have to be
measured when seeing how many new participants I could attract to the
platform with this presentation - time will tell! Apart from work, we
had a great boat tour through the hundreds of tiny islands along the
coast, went to a Finish smoke Sauna with heated baths - you cool
yourself of by jumping into the (very cold) sea! - and a great dinner.
This had a rather funny ending, when the organizers fooled around with
me: there was a quiz about Finish wildlife, which I apparently won. They
gave me a bottle filled with transparent liquid and some finish text
explaining the contents. Without much thought I assumed it was vodka and
immediately got some shot glasses and shared the bottle with the
conference attendants. Much to our surprise, it did not have the taste
of vodka, but was a special kind of water extracted from birch trees… I
guess, I have to rethink my attitude about alcohol! As for the Finish
people themselves, there are some quite notable things: first of, it
really is true, they are blond, almost all of them! Second, and I really
was quite astonished, I never met that many friendly - and really
friendly, not that artificial stuff you find in the US and Canada -
people in any country before. The only thing why I think they are
slightly crazy occurred to me when, while walking through town at about
15 ˚C, with jackets and long pants, we passed by an outdoor, public
swimming pool: it was full of Fins “simulating” that it still was
summer!&lt;/p&gt;
&lt;p&gt;Well, I am sure I forgot to cover some stuff, but then the post is
already long enough as it is. To all of you, have a nice autumn,
enjoying the last rays of sun - if you do not live in Spain!&lt;/p&gt;
</summary><category term="travel"></category><category term="mayte"></category><category term="biocreative"></category></entry><entry><title>Witches and Terrorists</title><link href="http://fnl.es/witches-and-terrorists.html" rel="alternate"></link><updated>2008-06-24T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2008-06-24:witches-and-terrorists.html</id><summary type="html">&lt;p&gt;The recent reports on renditions of terrorism suspects have reached an
alarming rate. Compare what happened during the middle ages and what is
occurring now again with slightly different circumstances:&lt;/p&gt;
&lt;p&gt;If you have one of these characteristics, you might be a
witch/&lt;em&gt;terrorist&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Red/&lt;em&gt;Dark&lt;/em&gt; hair,&lt;/li&gt;
&lt;li&gt;green/&lt;em&gt;dark&lt;/em&gt; eyes,&lt;/li&gt;
&lt;li&gt;female/&lt;em&gt;non-caucasian&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are considered a “target” by these traits, you can be
“rightfully” tortured by the inquisition/secret service.&lt;/p&gt;
&lt;p&gt;Governments worldwide, including most likely yours, are actively
ignoring our most basic rights in the name of “safety”. More and more
people are disappearing into “black sites”, tortured and ill-treated for
years and years - at levels where even the inquisition was not as bad as
compared to what is happening here and now, today. On the other hand, we
Japanese, EU, and US citizens have fought for so many centuries to
arrive at a status where everybody should understand the necessity for
human rights, free speech, etc.. It took two world wars and millions of
deaths to realize these trivial facts. Now governments are openly taking
away your rights from you again, trying to tell you they are
“protecting” you from a threat that virtually does not exist. And even
if it would exist, it does not give anybody the right to destroy the
life of any living person at their very foundations. If you do not act
now, you are either yourself approving that anybody, including you, may
be tortured for the sake of “security”, or are ignorant enough to
believe this will simply “go away” again some day.&lt;/p&gt;
&lt;p&gt;Please, do not let this continue; do not let humanity fall back into a
state that could be even worse than the middle ages. Any day you spend
not protesting against these inhuman and useless acts of random force
against humanity you are indirectly killing and torturing, too. Any day
this continues, your rights will deteriorate.&lt;/p&gt;
&lt;p&gt;If you do not protest or voice your opinion, you are indirectly
granting the governments of this world with the right to kill and
torture people at will. If you do not raise your voice, you, too, are
part of this machinery, killing and torturing because your silence is
set equal to agreeing to your government's actions in a democratic
world. Act now, and raise your voice against this madness - while we
still have the right of freedom of speech (or do we?).&lt;/p&gt;
&lt;p&gt;POST-EDIT: On an interesting side note, the only &lt;a class="reference external" href="http://www.petitiononline.com/stoper/petition.html"&gt;petition where anybody
worldwide can sign&lt;/a&gt;, has exactly 139 signees at the time of this
writing. How sad…&lt;/p&gt;
&lt;p&gt;POST-POST-EDIT: At least, there is an Amnesty International page against
Guantanamo Bay and illegal US torture &lt;a class="reference external" href="http://www.tearitdown.org/"&gt;here&lt;/a&gt;, which almost 140,000
people have signed so far - even though I think it should be dozens of
millions if humans were capable of using their head…&lt;/p&gt;
&lt;p&gt;POST-3-EDIT: And another very good video from AI published yesterday on
the subject: &lt;a class="reference external" href="http://www.amnesty.org/en/news-and-updates/video-and-audio/no-justification-for-torture-20080626"&gt;Torture can never be justified&lt;/a&gt;.&lt;/p&gt;
</summary><category term="human rights"></category></entry><entry><title>Amazonas 101</title><link href="http://fnl.es/amazonas-101.html" rel="alternate"></link><updated>2008-04-14T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2008-04-14:amazonas-101.html</id><summary type="html">&lt;p&gt;Colombia is one of the most magnificent countries I have been so far.
If you know a tiny bit of its history with all the bloody civil wars
which have been almost continuously tormenting the country since the
40s, it is more than astonishing to find that the people themselves are
very open and friendly. The lush green on the countryside and the
amazing beaches on the coasts, mixed with some really high mountain
peaks allow for a variety you will not find in many other countries.
Finally, as it is next to the equator, the climate is almost all year
round the same: warm and mostly sunny (well, Bogotá is at 2,600 ASL, so
bring a warm jacket for the capital...).&lt;/p&gt;
&lt;p&gt;The current president, Uribe, is sending military forces everywhere in
the country to protect the civilians and tourists from attacks from
guerilla and paramilitary groups. Although you might not agree that this
is the best solution to the problem, you have to admit that he so far is
probably the most successful president in terms of restoring relative
security - at the great price of sacrificing the peoples personal
freedom, obviously; Colombia probably never has been as safe in the past
few decades as it is now - and it has by far less hostage-takings per
year as most uninformed people would make you believe (by now, something
below 600 per year). In my travels, I never felt more unsafe than in any
place in Europe - at least if you learn to ignore that at every second
corner you see a small group of military personnel or police.&lt;/p&gt;
&lt;p&gt;Both major cities I visited, Bogotá and Cartagena, are really nice
cities - although the crazy traffic and taxi drivers in Bogotá can make
you feel a little ill to you stomach... Especially Cartagena is really
worth the visit, the old town being built in a style slightly similar to
the houses in Extremadura (Spain) - and not without reason probably,
as most Conquistadores came from this region of Spain. Yet, the bright
colors and plenty of flowers and green give the town a very unique and
lovely look. Last but not least, Cartagena is on the Caribbean coast and
therefore you have plenty of wonderful beaches to choose to spend your
day. On a general advice: usually, you take boats to get to those
beaches, which leave from the town center. Insist, really, to be taken
there by a tiny private boat (not more than 20 or so passengers) and do
not take one of the big ships: it cuts your beach stay in half, you are
dumped at a super-touristic aquarium nobody seemed interested in anyway,
and spend the boat time with hundreds of Colombian families (including
everything from grandmother to great-grand child). Not that it was my
worst experience ever, but there are more fun ways to waste your time...&lt;/p&gt;
&lt;p&gt;The major part of our travels - with my [now (*kiss*)] girlfriend
Mayte and two of her friends from Portugal and Spain, Xana and Ivan - we
spent in the Amazons. It is hard to describe the experience of visiting
the jungle, but if you have been to a real desert, on top of high
mountains or glaciers, or other really strange places, you know what I
am talking about. The biodiversity is so amazing you will never be able
to go back to a zoo or botanic garden without a knowing smile on your
face. I have no idea how many different plants I saw - including the
Victoria amazonica, the largest lotus in the world - but when one of our
guides was telling us about which plant heals what while in the jungle,
I got the impression of walking though a pharmacy... The animal life is
just as amazing: alligators, snakes, birds in all varieties and kinds,
spiders, sloths, insects of all sizes, piranhas (we even caught our own
- but as far as I can tell, it took us more chicken meat to catch them
than they yielded...), even dolphins (which get a pink tint when they
hunt because of their circulation - a really unique view) - plus another
few dozen or so I have missed to list here.&lt;/p&gt;
&lt;p&gt;Moving around the jungle might seem tough and dangerous at first - and
I make a bet it is, if you try to move cross-country straight through
the jungle for days. We were not intending to do that - we were moving
along the Amazonas river only - and always had at least a hut to sleep
in, with beds and mosquito nets in the most &amp;quot;extreme&amp;quot; cases. Most of the
time we spent in villages and towns (Leticia -&amp;gt; Puerto Nariño [a little
jewel in the Colombian Amazons and a must visit] -&amp;gt; Leticia/Tabatinga -&amp;gt;
and Manaus) in hotels, where you do not even need to use mosquito nets.
The greatest danger is you doing something stupid on your own. The
interested might want an advice on what to bring, so I'd suggest to
pack:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;lots of insect repellent (we used Relec extra fuerte, about 1 bottle
[100 mL each] per person and week),&lt;/li&gt;
&lt;li&gt;a light rain protection (if it rains really heavy - which it does
more or less every morning - just forget protection... this is more
against the wind and on boats),&lt;/li&gt;
&lt;li&gt;some long-sleeves and long pants (protection against sun and/or while
hiking in the jungle),&lt;/li&gt;
&lt;li&gt;decent (!) hiking shoes,&lt;/li&gt;
&lt;li&gt;very strong sun protection (factor 40 or more - I used 60!),&lt;/li&gt;
&lt;li&gt;a towel (no, this is no Hitchhikers Guide joke :-) - preferentially,
one of those micro-towels to save space and weight),&lt;/li&gt;
&lt;li&gt;a flashlight,&lt;/li&gt;
&lt;li&gt;a small first aid kit with antibiotics against diarrhea, pills to
dampen fever and Malaria effects (Ibuprofen 600, Malaron - just in
case - I strongly advise against taking those Malaria pills on the
trip as prevention if you do not go jungle-trekking for many days!
The side effects are rather ugly, and actually the pills only reduce
the effects of Malaria, they do not really help prevent it.),&lt;/li&gt;
&lt;li&gt;Suero (salt &amp;amp; electrolytes) powder, and a lots of it! This protects you
from dehydrating and diarrhea; My friends all laughed at me for
drinking a liter of it a day (it tastes rather ugly), but I was the
only of our group to not have to spend a day on the pot in the end...&lt;/li&gt;
&lt;li&gt;a very light (I used silk) sleeping bag, and&lt;/li&gt;
&lt;li&gt;something to pass time (books, card games, etc. - hey, it's Colombia,
no need to be in a hurry).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a final shout-out: many thanks to my amazing travel companions (aka
&amp;quot;los pendejos/tottos&amp;quot;...) and some very special ones to the most
gorgeous girl in the world that I am more than just happy to have become
close with during this trip: You provided me with one of the most
exciting trips I ever have made in my life!&lt;/p&gt;
</summary><category term="travel"></category></entry><entry><title>GEO-4</title><link href="http://fnl.es/geo-4.html" rel="alternate"></link><updated>2007-10-28T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-10-28:geo-4.html</id><summary type="html">&lt;p&gt;If you don't know what &lt;a class="reference external" href="http://www.unep.org/geo/geo4"&gt;GEO-4&lt;/a&gt; (4th Global Environment Outlook) is, it is
about high time to get you informed. This is a recent publication by the
United Nations, explaining why this planet's ecosystem and the human
race is close to the point of no return, facing (unavoidable)
extinction. Let's hope this is what the authors (390 scientist backed by
another 1000 reviewers) intend it to be: the final &amp;quot;wake up call&amp;quot; for
&lt;strong&gt;all&lt;/strong&gt; of us.&lt;/p&gt;
&lt;p&gt;To provide you a few facts:&lt;/p&gt;
&lt;p&gt;We are currently, on a total, using 30 % more resources than earth can
provide for us; water contamination is the number 1 cause of death
worldwide; we are overfishing at a rate of 250 %; major regions of the
world's oceans having become oxygen dead zones (i.e. lifeless); in
Africa, food production over the past 20 years has declined by more than
10 %; somewhere between today and 2100 we will have reached a global
warming level which will lead to inevitable (&amp;quot;point of no return&amp;quot;)
extinction of the ecosystem (i.e. incl. humanity) - oh well, I could go
on... this report is approx. 400 pages! The only positive news I could
mine: at least the ozone layer will be recovering - although currently,
the Antarctic hole is still growing, being larger today than ever
before. The real message behind all this:
&lt;strong&gt;We have to act *now*!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One last warning: this might be the most depressing news you ever
encountered, yet also the most important if you were not aware of these
facts (I surely wasnt aware of that many....)&lt;/p&gt;
</summary><category term="environment"></category></entry><entry><title>Weekend Dance</title><link href="http://fnl.es/weekend-dance.html" rel="alternate"></link><updated>2007-09-17T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-09-17:weekend-dance.html</id><summary type="html">&lt;p&gt;As it is still summer time here in Madrid (well, at least for us
northern foreigners), I just enjoyed a all-night open air DJing event in
t-shirt and short pants this weekend. Remember this is Madrid, so
nothing ended before the sun chased us away! It also was the first time
I saw Massive Attack live, which turned out to be quite cool. They're
not so much about an energetic performance, but you could imagine them as
a mixture of Pink Floyd-ish showcasing and a De Phazz-like Mary Jane
atmosphere... Anyway, great concert with about 50k visitors in a full
arena. I even liked Sven Väth - but only only because I was standing
next to a wall for his performance, so his BPMs were doubled by the
wall's echo... Oh, and if you like slightly harder beats (they had tons
of good old hardcore samples in their mixes), put you ears on Vitalic, at
least live they rock! Another unknown tip and quite impressive was
Digitalism. Have phun listening!&lt;/p&gt;
</summary><category term="madrid"></category><category term="music"></category></entry><entry><title>TextMate Python and Django cheat sheet</title><link href="http://fnl.es/textmate-python-and-django-cheat-sheet.html" rel="alternate"></link><updated>2007-09-07T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-09-07:textmate-python-and-django-cheat-sheet.html</id><summary type="html">&lt;p&gt;After not finding anything appropriate, I decided to do my own reference
card (aka cheat sheet) for the pythonic and django commands you can use
in TextMate. If you want to have it, download it from &lt;a class="reference external" href="http://www.scribd.com/doc/7759743/TextMate-PythonDjango-Cheat-Sheet"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category></entry><entry><title>Travelling around Spain</title><link href="http://fnl.es/travelling-around-spain.html" rel="alternate"></link><updated>2007-08-19T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-08-19:travelling-around-spain.html</id><summary type="html">&lt;p&gt;In the last few weeks I had been to Cadiz and Almeria, both in
the south of Spain. Well, actually I was in none of those cities, but in
places close by.&lt;/p&gt;
&lt;p&gt;The first trip together with Gema was down to Cadiz, about 30 km south
of the city some of Gemas friends were renting a flat in &lt;a class="reference external" href="http://maps.google.es/maps?f=q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=Conil,+Spain&amp;amp;amp;ie=UTF8&amp;amp;z=11&amp;amp;om=1"&gt;Conil&lt;/a&gt;, a
village nearby. South of Cadiz you basically find the probably most
beautiful beaches of Spain, at least that was my impression and what my
Spanish friends told me (and, on a side note, the most incredible amount
of beautiful girls, too...). The only downside is that it can be kind of
windy, but if you know it, just bring some very stable wind protection,
and you should be fine. Actually, the one day it was windy, I was quite
happy, because with the burning sun having a swim and then cooling in
the breeze is a real relief. We also visited Tarifa, one of the main
wind- and kite surfing sites of Europe. You never saw a village so small
just full of surf shops - if you ask me, more dense than the skiing
shops in the tourist-trap villages in Tirol. Also we spent some time in
Los Caños de Meca, right between Conil and Tarifa, which is a real hippy
town and has a cool bar which is made up a bit like a ship deck and is
above a cliff looking out over the Atlantic. Great place to have some
&amp;quot;copas&amp;quot; (drinks)! On our way back to Madrid we took the time to stop in
Cordoba, which might be, together with Sevilla, the hottest (in
temperature, man!) town of Spain. In the center you can visit an
enormous (like in really enormous) mosque, as Cordoba and Granade where
interchangeably the capitals of the Arabian empire during the medieval
ages. Now it houses several (!!!) churches inside and it is really worth
paying the 8 Euros entry. Gema was slightly angry about my cultural
blasphemy, as the first thing that came to my mind upon entering was
&amp;quot;and where is Indiana Jones?&amp;quot;...&lt;/p&gt;
&lt;p&gt;The second trip to Almeria in the southeast corner of Spain was
actually for a festival, the &lt;a class="reference external" href="http://www.creamfields-andalucia.com/"&gt;Creamfields&lt;/a&gt; in Spain. This festival is
exclusively for electronic music, and the lineup were bands and DJs like
Basement Jaxx, The Prodigy, or John Digweed. It's a 14 h festival
&amp;quot;only&amp;quot;, starting at 6 pm and lasting until about 8 am the next morning.
But believe me, that was by far enough for me, and it took me several
days to recover... The greatest thing about this location is that you
have the After Hour right smack on the beach, hanging out in the sun and
taking an occasional bath to cool down. Although it was great, I am not
sure to recommend it again: This year they had 50k visitors, and the
only access is a single little road, which meant we were jamming 2 1/2 h
in the car just to get in, and then another 1/2 h walk from the parking
place to the actual festival. Considering that they have more attendees
every year, I don't want to know how bad it will be next year. So if you
feel like going, I might recommend you come a day earlier and put up
tent there on the beach (actually, better in the wood at the side of the
beach - if you can't imagine why, just do as I recommend...).&lt;/p&gt;
&lt;p&gt;So, all in all, two really gorgeous trips around Spain, and I am
looking forward to some more in the days to come this year. The only
thing I could slap my ass for is that I on both occasions forgot to
bring my camera...&lt;/p&gt;
</summary><category term="spain"></category><category term="travel"></category><category term="music"></category></entry><entry><title>Good Programmers?</title><link href="http://fnl.es/good-programmers.html" rel="alternate"></link><updated>2007-05-08T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-05-08:good-programmers.html</id><summary type="html">&lt;p&gt;Just now again, I stumbled across one of these mind-numbing blog posts
telling you what makes a &amp;quot;good&amp;quot; - sometimes even &amp;quot;great&amp;quot; - programmer.
As always, it went on about programming before college, having
programmed in private, knowing all sorts of technologies, being witty
and intelligent, etc. etc. etc.. Google it, you'll find dozens of such
articles. On those standards I would be a great programmer, as I usually
fit almost any point on such ridiculous lists, just as most of us
programmers do to a certain extent, and for sure after some time in the
programming biz. First of, I do NOT consider myself a &amp;quot;great
programmer.&amp;quot; Why? Because I have actually worked alongside truly great
programmers. Also, I have worked with many a programmer, yet I still do
not even need all fingers of one hand to count up all &amp;quot;great ones.&amp;quot; So
what makes up a great programmer? Actually, you can sum it up to three
quintessential points, in increasing degree of difficulty: A good
programmer...&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;...knows his interface.&lt;/li&gt;
&lt;li&gt;...can communicate his work to anyone.&lt;/li&gt;
&lt;li&gt;...surpasses the time and space constraints of a project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make this a bit more clear: (1) pertains to all HCI
(human-computer-interface) related stuff like OS, IDE, or keyboard (!);
but also libraries, tools, and the knowledge of at least one programming
language close to the skill level of writing the API for it. There is no
need for somebody knowing several languages, if he can't handle at least
one really well. (2) Is about his ability to discuss the needs,
problems, requirements, etc. with his boss, a client, or a fellow mate
at just the right level of technical detail and conciseness necessary.
The third point finally is the most important of all, and usually never
even gets mentioned in most of these page-filling &amp;quot;what makes a good
programmer&amp;quot;-lists, much to my amusement (and is the main reason why I
just had to blog this...). This point implies, a great programmer is
capable of telling you how long his job will take (or at least will
conclude that he cannot make - for good reasons - a true estimate and
will know how to &amp;quot;bet on the safe side&amp;quot;), and he will then finish that
job by that estimate. Also, the way he has designed and implemented the
program will be such that others can follow as long as they have the
technical background (&amp;quot;best practices&amp;quot;, etc.), and will have all
interfaces and crucial nodes developed in a style which requires minimal
and necessary (i.e., optimal) documentation. Of these space and time
constraints (deadline, design, implementation, and documentation) all
will be fulfilled, and at least one of them will surpass what one was
expecting when the project started. I'd say it is usually the toughest
aspect making up great programmers.&lt;/p&gt;
&lt;p&gt;I know that almost all guys saying they're &amp;quot;good programmers&amp;quot; (just
because they're too many) fail at least two of these three requirements,
and I freely admit I have my weaknesses in some of them and therefore do
not consider myself in the top league (hey, I'm working on it ;)); but
at least I realize those are the guys pulling of the great stunts; not
the ones who started programming at age ten, do it sixteen hours a day,
and know &amp;quot;all&amp;quot; about twenty different IT technologies (believe me, you
just can't...). We all are somewhat like this at certain points in time,
but the great ones got the above three points right, and especially
those three; That's what makes them uniquely different. So, please stop
glorifying your enthusiasm with stupid post on what makes &amp;quot;great&amp;quot;
programmers, but really only showing what nerds you are. Thank you!&lt;/p&gt;
</summary><category term="programming"></category></entry><entry><title>Must have apps for OSX</title><link href="http://fnl.es/must-have-apps-for-osx.html" rel="alternate"></link><updated>2007-04-06T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-04-06:must-have-apps-for-osx.html</id><summary type="html">&lt;p&gt;As everyone has one, I just thought I might as well also put together
my personal list of the most useful applications for your nifty Mac
running the one and only truly user-friendly, working windowed OS: X!
The lists are ordered by importance, some apps are non-free, but I
explain why I use them and why you might want to as well.&lt;/p&gt;
&lt;div class="section" id="system-tools"&gt;
&lt;h2&gt;System Tools&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://quicksilver.blacktree.com/"&gt;Quicksilver&lt;/a&gt; - application launcher, action and command window -
THE most important app to have on any Mac, just get it (and learn to
use it...).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://free.abracode.com/cmworkshop/"&gt;OnMyCommand&lt;/a&gt; - custom right click context menus. Great tool, I use
it for a tons of stuff from SVN repository interaction, file settings
and archiving, to things like &amp;quot;select a Madrid address to
automatically open the location in Google maps&amp;quot; or &amp;quot;translate the
selected text to English/Spanish.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cyberduck.ch/"&gt;Cyberduck&lt;/a&gt; - is a great FTP/SFTP client, if you need one - and
definitely more elegant than using Finder...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="editors"&gt;
&lt;h2&gt;Editors&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aquamacs.org/"&gt;Aquamacs&lt;/a&gt; - is the one-in-all solution and my favorite emacs port
for the Mac. Although, I only use it for LisP and C programming now,
as I have TextMate (see below) for my Python and web development as
well as simple text editing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.uoregon.edu/%7Ekoch/texshop/"&gt;TexShop&lt;/a&gt; - is the most comfortable WYSINWYG (what you see is NOT
what you get...) editor for LaTeX, which is the most reliable and
stable environment to write books and papers. Yet, you naturally just
can keep editing your TeX in emacs/Aquamacs...&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.macromates.com/"&gt;TextMate&lt;/a&gt; - editor is kinda cool in some senses, but has some
drawbacks: first, it ain't free - I have it because my research
institute bought a license for me without even asking. It doesn't
know LisP and C. Most features it has you can have with emacs or (if
things would come to worst) write them with ELisP for emacs instead
of learning the TM macro commands. Yet, some things are kinda cool,
especially the filebrowser and codebrowser I prefer over the emacs
Speedbar. It is great for Python, Ruby, XML, Perl, JavaScript and SVN
interaction (if you are damned to program Java, use Eclipse...). So
that, incredibly fast startup, and decent column selection (you can
have that in emacs with a plug, too!) are my reasons for using it. If
you are willing to spend the bucks, get it. If you want an all-in-one
solution stick with some emacs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-things-done"&gt;
&lt;h2&gt;Getting Things Done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.barebones.com/products/yojimbo/"&gt;Yojimbo&lt;/a&gt; - if you are only willing to spend money on just one
single application, this is it. This is sort of a multi-functional
archiver: it stores your serial numbers, passwords, credit card
details, invoices, interesting documents, webpages and pdfs, the
metro plan of your city - whatever, you name it. Stuff is properly
encrypted using AES for protection. You can sort, tag, file your
content in a very decent way and you actually get to immediately find
the information again. This thing should be standard in any OS X
distribution, makes life so much simpler.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://journler.com/"&gt;Journler&lt;/a&gt; - is a nice diary to keep track of what you are doing and
your ideas about it. I use it as my development diary (&amp;quot;lab journal&amp;quot;
would be the term, I guess...). You can add all sorts of media to
your entries (videos, sound (voice recordings!), images) and even
upload your entries to your blog. Cool!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bargiel.home.pl/iGTD/"&gt;iGTD&lt;/a&gt; - yet another GettingThingsDone client - if you are in a
situation like me and have 10k things in your head and another 10k
todos, this is what helps you keeping track of what's next.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apple.com/iwork/keynote/"&gt;Keynote&lt;/a&gt; - from the iWork package; if you need to do presentations:
please do not try to infest your gorgeous Mac with crap software from
Redmond. Do your presentations with Keynote - their just better,
nicer and more aesthetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="media"&gt;
&lt;h2&gt;Media&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.videolan.org/vlc/"&gt;VideoLANClient (VLC)&lt;/a&gt; - the media player for the Mac: no more
problems with missing audio/video codes, plays (almost) everything
and allows full screen for free (a two thumbs down on QuickTime for
this one!).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.getdemocracy.com/"&gt;Democracy&lt;/a&gt; - player, the most fun way to handle, download and
archive your video collection from YouTube, Yahoo! and Google Video,
Blogdigger, et al. as well as any clips, vids and movies you have
locally. Supports full screen viewing for free (as opposed to
QuickTime...), but ain't as versatile with codecs as VLC - but you
can teach Democracy to launch those vids in VLC.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apple.com/itunes/download/"&gt;iTunes&lt;/a&gt; - is a must have if you own an iPod (or, eventually, an
iPhone...). If not, it is still the coolest way to keep track of your
podcasts, radio stations and browse your local MP3s (covers).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apple.com/ilife/iphoto/"&gt;iPhoto&lt;/a&gt; - should come with your Mac anyway AFAIK. The most
practical way of staying on top of your ever-growing picture and
image collection while integrating nicely with other apps (like
Keynote, Journler and many others).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="safari-plugins"&gt;
&lt;h2&gt;Safari Plugins&lt;/h2&gt;
&lt;p&gt;If you are just such a Cocoa-fan as me, and prefer browsing with
Safari over Firefox (yes, OK, decent web development can only be done
with the fox, so you do need it anyway in this case...) here are some
plugs. There are some reasons to use Safari: integrates websites from
your Address Book into your Bookmarks, your bookmarks are system-wide
searchable, you can aggregate feeds very nicely, pushing URLs (weblocs)
to other apps is easy are just some. UPDATE: now back to the Fox again,
the plugins for it just rule! UPDATE (2008): and to Safari - high-speed,
nicest rendering of all browsers and WebKit rule even more!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.kottke.org/05/02/saft-safari-plugin"&gt;Saft&lt;/a&gt; - is the only plugin I can recommend to buy. And if only for
the full screen mode. This is just so much cooler than even the
crappy IExploder 7 full screen mode, as it actually intelligently
hides what you do not want to see currently (status bar, booksmarks,
URL bar). Naturally, it has tons of other features, too - check it
out.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.inquisitorx.com/safari/"&gt;Inquisitor&lt;/a&gt; - is the coolest enhancement for the (Google) search
box and possibly the best free plugin. Just get it.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pimpmysafari.com/plugins/safariblock-112"&gt;SafariBlock&lt;/a&gt; - is a good way to block images, popups and frames you
don't wanna see. Not as powerful as Pith or Saft, but a free
alternative.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="apple"></category></entry><entry><title>Skiing in Spain</title><link href="http://fnl.es/skiing-in-spain.html" rel="alternate"></link><updated>2007-03-27T00:00:00+02:00</updated><author><name>Florian Leitner</name></author><id>tag:fnl.es,2007-03-27:skiing-in-spain.html</id><summary type="html">&lt;p&gt;Actually, when I decided to move to Spain I would never have thought of
skiing here. There are the Pyrenees, where you could expect some areas,
but I was not expecting anything anywhere else. Meanwhile, I have been
skiing in Asturias (north, center) and Sierra Nevada (south, with a view
of Africa!)... Especially the latter was quite convincing: a large skiing
area with a lot of people who can actually ski (for Tyrolean standards
quite hard to achieve!). Just thought it would be kind of crazy to be
skiing end of March in Spain, while having a glimpse at Africa and
enjoying almost 20 ˚C in the &amp;quot;valley&amp;quot; (that is, Granada).&lt;/p&gt;
&lt;p&gt;While I am at it: Granada is quite a beautiful town, and naturally there
is the Alhambra to visit (but I did not enter: you have to reserve at
least 2 months ahead if you want to get in...). There are more foreigners
here than in Madrid, naturally, and it seems to have slightly less extreme
temperatures than the capital. Nice place to live, I guess: 1 hour for
skiing, 1 hour to the beach!&lt;/p&gt;
&lt;p&gt;In summary, there are 3 decent areas for skiing in Spain: the Pyrenees,
Asturias and Granada/Sierra Nevada. I have not seen the first, but
everybody tells me it is the best place. Anyway, I'd say Granada is
definitely the fanciest and worth a visit, too. And then you can ski on
about any other mountain range here, too (e.g., Gredos, Guadarrama, etc.),
but for my taste, the slopes there are not quite as steep and long as I'd
like them.&lt;/p&gt;
&lt;/p&gt;</summary><category term="spain"></category><category term="skiing"></category></entry></feed>